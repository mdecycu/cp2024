<h1>About</h1>
<p>課程倉儲: <a href="https://github.com/mdecycu/cp2024">https://github.com/mdecycu/cp2024</a></p>
<p>課程網頁: <a href="https://mde.tw/cp2024">https://mde.tw/cp2024</a></p>
<p>課程目標:</p>
<p style="padding-left: 30px;">學習如何利用 Python 程式協助執行機電整合系統設計</p>
<p>課程教材:</p>
<p style="padding-left: 30px;">電子書: <a href="/downloads/learn_python_with_jupyter.pdf">Learn Python with Jupyter</a> (5.6MB)</p>
<p style="padding-left: 30px;">教材介紹: <a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Introducing "Learn Python with Jupyter"</a></p>
<p style="padding-left: 30px;">教材網站: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: fqpabi8</p>
<p>USB 隨身碟:</p>
<p style="padding-left: 30px;">下載可攜程式套件 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p><span>零組件繪圖套件: </span><a href="https://solvespace.com/">Solvespace</a> (已包含在可攜程式套件中)</p>
<p><span>機電模擬套件: </span><a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> (已包含在可攜程式套件中)</p>
<p>Reference:</p>
<p style="padding-left: 30px;"><a href="https://github.com/microsoft/pybryt">https://github.com/microsoft/pybryt</a> (auto-assessment Python library for teaching and learning)</p>
<p style="padding-left: 30px;"><a href="https://formosa.oj.cs.nycu.edu.tw/signin/">https://formosa.oj.cs.nycu.edu.tw/signin/</a></p>
<p style="padding-left: 30px;"><a href="https://leetcode.com/">https://leetcode.com/</a></p>
<p style="padding-left: 30px;"><a href="https://www.hackerrank.com/domains/python">https://www.hackerrank.com/domains/python</a></p>
<p style="padding-left: 30px;"><a href="https://py.checkio.org/">https://py.checkio.org/</a></p>
<p style="padding-left: 30px;">清大資工大一的 C++ 計算機程式課程(<a href="https://www.youtube.com/@vllabnthu1164/videos">兩個學期</a>)</p>
<p style="padding-left: 30px;">東吳<a href="http://163.14.73.18/">自動化程式評測系統</a></p>
<p>課程評分:</p>
<p style="padding-left: 30px;">出席 (10%) - 自行舉證評分</p>
<p style="padding-left: 30px;">Github Classroom 作業與隨堂考試 (70%) - 以 Github 帳號領取作業倉儲後, 建立包含操作流程影片與檔案下載的網頁</p>
<p style="padding-left: 30px;">期末口頭與書面專題報告 (20%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告</p>
<hr/>
<p>行事曆</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei"> 全頁檢視 </a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h2>Links</h2>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/f64ab3abdda2967cdf82a9ac00edcf3b83c8346e/1a_w3_site_repo_brython.py">1a site and repo</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/f64ab3abdda2967cdf82a9ac00edcf3b83c8346e/1b_w3_site_repo_brython.py">1b site and repo</a></p>
<hr/>
<p>1a</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/7198a2141b12add6057bd25f1e445e68661e3b0e/1a_weekly_brython.py&amp;page_title=w10">w10</a> <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/7198a2141b12add6057bd25f1e445e68661e3b0e/1a_weekly_brython.py&amp;page_title=w11_hw">w11_hw</a> <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/7198a2141b12add6057bd25f1e445e68661e3b0e/1a_weekly_brython.py&amp;page_title=w12_hw">w12_hw</a> <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/7198a2141b12add6057bd25f1e445e68661e3b0e/1a_weekly_brython.py&amp;page_title=w13_hw">w13_hw</a></p>
<p>1b</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/2dbc73e836424561e34cf05b7a91eaa0c6e7076c/1b_weekly_brython.py&amp;page_title=w10">w10</a> <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/2dbc73e836424561e34cf05b7a91eaa0c6e7076c/1b_weekly_brython.py&amp;page_title=w11_hw">w11_hw</a> <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/2dbc73e836424561e34cf05b7a91eaa0c6e7076c/1b_weekly_brython.py&amp;page_title=w12_hw">w12_hw</a> <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/2dbc73e836424561e34cf05b7a91eaa0c6e7076c/1b_weekly_brython.py&amp;page_title=w13_hw">w13_hw</a></p>
<hr/>
<p>上列學員的作業網站與倉儲連結資料, 取自 <a href="https://github.com/mdecycu/list">https://github.com/mdecycu/list</a> 倉儲中各班名單的 Github Pages, 若學員的 Github 帳號有異動, 必須重新領取作業倉儲並透過 Pull Requests 加入或修改與本身學號對應的 Github 帳號.</p>
<p>學號與 Github 帳號間的分隔符號為 Tab, 也就是 \t, Pull Requests 是一種允許任何 Github 使用者透過軟性且間接的方式, 提出修改任何公開倉儲中的任何資料.</p>
<p>所謂軟性, 意即針對任何公開倉儲, 雖然任何 Github 使用者, 都可以透過 Pull Requests 提議修改內容, 但是否將修改的內容合併入目標倉儲的決定權, 並不在提出 Pull Requests 的用戶, 而是掌握在對目標倉儲有直接修改權的 Github 用戶.</p>
<p>所謂間接, 指的是 Pull Requests 並非直接對目標倉儲的內容進行修改, 而是必須先登入 Github 帳號後, 連線到目標倉儲的網址, 然後透過 Fork 功能, 將目標倉儲"插"一份到自己的帳號下, 由於"插"回來的倉儲是位於自己的帳號下, 因此可以對 Forked 倉儲內容進行修改.</p>
<p>但是修改 Forked 倉儲內容之後, 必須透過建立 Pull Requests, 將此 PR 通報到目標倉儲, 然後再由目標倉儲的管理者決定是否接受此"拉回"合併的"請求".</p>
<p>上面所說明的所謂 Pull Requests 是希望從 Forked 倉儲的版本資料, 合併至目標倉儲, 其決定權在目標倉儲的管理者. 但另外一種使用情境則是, 當目標倉儲被某一使用者 Fork 之後, 目標倉儲的內容因為改版而變更後, 若先前 Forked 倉儲希望取得目標倉儲所進行的修改內容, 需要在建立所謂 Pull Requests 流程時的 URL, 將目標倉儲的管理者帳號與 Forked 倉儲用戶帳號對調, 要求執行所謂的"逆向" Pull Requests.</p>
<p>由於"逆向" Pull Requests 的合併, 是希望將目標倉儲的修改內容, 合併至 Forked 倉儲, 其決定權自然屬於 Forked 倉儲的用戶, 因此該用戶可以自行同意該"逆向" Pull Requests 的合併請求, 讓 Forked 倉儲的內容與目標倉儲保持同步.</p><h2>Git</h2>
<p>透過與 AI 對話了解 Git:</p>
<p><span style="background-color: #ccffcc;">使用 git 的常見情境與對應指令有哪些? </span></p>
<p style="padding-left: 30px;"><span style="background-color: #ccffcc;">請再舉一些例子: </span></p>
<p><span style="background-color: #ccffcc;">在多人協同的情況下, 與 git 有關的常見情境及指令有哪些? </span></p>
<p><span style="background-color: #ccffcc;">如何向初學者說明 Git 指令中的 git add? </span></p>
<p><span style="background-color: #ccffcc;">何謂 Git 暫存區（或稱為索引）? </span></p>
<p><span style="background-color: #ccffcc;">Git 暫存區是在倉儲的哪個地方, 資料會一直存在還只是暫存?</span></p>
<p><span style="background-color: #ccffcc;">何謂提交? </span></p>
<p><span style="background-color: #ccffcc;">當使用者執行 git add . 之後,  git.exe 具體做了甚麼動作? </span></p>
<p><span style="background-color: #ccffcc;">甚麼是文件的 SHA-1 雜湊值? </span></p>
<p><span style="background-color: #ccffcc;">如何說明密碼學演算法? </span></p>
<p><span style="background-color: #ccffcc;"></span></p>
<h2>Office365</h2>
<p>計算機程式上課時段將利用 MS Teams 進行線上串流, 學員登入 @nfu 網域的 Teams 後, 可以即時觀看 demo 電腦的桌面, 而關鍵操作畫面將會透過錄影存為 .mp4 後上傳至 <a href="https://www.youtube.com/@-kmolab9376">Mdecourse</a>.</p>
<p>首次使用 @nfu 網域設置的 MS Office 365, 請參考下列步驟登入計算機程式課程的 MS Teams:</p>
<ol>
<li>學校 web mail: <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a></li>
<li>密碼重置系統: <a href="https://pwd.nfu.edu.tw/">https://pwd.nfu.edu.tw/</a></li>
<li>登入 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 後收信匣中, 可看到校方寄出的 "Office 365 學生帳號說明"信件, 說明如何登入 Office 365</li>
<li>登入 Office 365 後, 若在電腦教室可以選擇使用網頁版</li>
<li>線上課程將使用 Office 365 的 Teams, 計算機程式課程的 Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></li>
</ol>
<p><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">申請 Github 帳號步驟:</span></p>
<ol>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">連結至 <a href="https://github.com/join">https://github.com/join</a></span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">填寫基本資訊:<br/>   - Username：輸入希望採用的用戶名稱, 若無法使用自己的學號, 可以在學號前加入英文姓名三個簡寫字母<br/>   - Email address：輸入電子郵件地址, 可以使用上列學校配發的電子郵件地址<br/>   - Password：設定密碼</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">完成驗證: GitHub 會要求完成驗證以確認不是機器人, 通常需要選擇或標記圖片來完成這個步驟</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">選擇 Free 方案後可以選擇是否願意訂閱電子報</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">點擊 Create account 按鈕以完成註冊</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">帳號建立後, GitHub 會發送一封驗證郵件, 必須點擊其中的驗證連結才能開始使用 Github 建立倉儲與 Gist</span></li>
<li><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">驗證郵件後, 可以登入 GitHub 進行基本設置, 例如:個人資料、SSH 金鑰配置等<br/><br/></span></li>
</ol>
<p><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">Github 帳號的 Two-factor authentication (兩段式認證):<br/></span></p>
<p style="padding-left: 30px;"><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">透過 <a href="https://chatgpt.com/">https://chatgpt.com/</a> 詢問:</span></p>
<p style="padding-left: 60px;"><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">"Github 帳號的 Two-factor authentication 如何設定?"</span></p>
<h2>Evaluate</h2>
<p>網頁內容評分: 用來評量受評者的作業網頁內容, 是否完整且充實</p>
<p>操作影片評分: 用來評量受評者所提供的操作影片內容, 是否說明清楚, 提供字幕且完整呈現標的內容</p>
<p>倉儲提交說明: 用來評量受評者所提供的倉儲提交說明是否清楚, 以及提交次數及頻率, 是否足以證明其用功程度</p>
<p>下載檔案評分: 用來評量受評者在作業網頁上所提供的檔案下載內容, 是否完整且內容充實</p>
<p>作業心得評分: 用來評量受評者的作業心得是否內容豐富, 且值得令人讚賞與學習</p>
<hr/>
<p>以上各分項評分各佔 20%, 評分基準如下:</p>
<p>非常棒 - 得 20 分 (即一百分, 表現非常棒且完美的評分)</p>
<p>很棒 - 得 18 分 (即九十分, 表現很棒的的評分)</p>
<p>很好 - 得 16 分 (即八十分, 表現很好的評分)</p>
<p>還可以 - 得 14 分 (即七十分, 表現還可以的評分)</p>
<p>及格 - 得 12 分 (即六十分, 表現算是及格的評分)</p>
<p>需加強 - 得 10 分 (即五十分, 需要再加強的評分)</p>
<h2>Jupyter</h2>
<p>USB 隨身碟:</p>
<p style="padding-left: 30px;">下載可攜程式套件 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p>利用 Jupyter 建立 .ipynb 格式的 notebook 檔案:</p>
<ol>
<li>以 start_ipv6.bat 開啟隨身碟中的可攜程式環境</li>
<li>在命令列視窗中, 輸入 jupyter lab --collaborative 後可在瀏覽器中開啟 Jupyter lab</li>
<li>系統內定以執行 jupyter lab --collaborative 指令所在目錄作為根目錄</li>
<li>Jupyter lab 的伺服器 ip 設定位於 home_ipv6\.jupyter\jupyter_server_config.py 檔案中的 c.ServerApp.ip 變數, 內定為 localhost, 使用者可以自行修改為電腦連外 IPv4 或 IPv6 位址</li>
<li>home_ipv6\.jupyter\jupyter_server_config.py 檔案中的 c.ServerApp.port = 8888 為內定連線埠號</li>
<li>系統內定使用 http 連線, 使用者可利用 openssl 建立 cert.pem 與 key.pem, 並與 c.ServerApp.certfile 及c.ServerApp.keyfile 等系統變數綁定後, 使用 https 連線</li>
<li>若希望讓其他用戶透過網路進行協同編輯, 可從命令列視窗中, 輸入 jupyter server list 取得登入所需的 token, 或將設定修改為使用者自訂的密碼登入</li>
<li>各 Jupyter lab 用戶可從左方的 Collaboration 頁面中檢視參與協同者的名單</li>
<li>使用結束後, 以 File - Shutdown 關閉 Jupyterlab</li>
</ol>
<p>利用 openssl 指令建立 cert.pem 與 key.pem:</p>
<p style="padding-left: 30px;">openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</p>
<p>使用 https 連線時, cert.pem 與 key.pem 設定:</p>
<p style="padding-left: 30px;">c.ServerApp.certfile = u'y:\home_ipv6\.jupyter\cert.pem'</p>
<p style="padding-left: 30px;">c.ServerApp.keyfile = u'y:\home_ipv6\.jupyter\key.pem'</p>
<p>Jupyter 中使用 iframe 標註:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from IPython.display import IFrame
IFrame('https://mde.tw', width=700, height=350)</pre>
<p>分享 .ipynb 檔案內容:</p>
<p>將 .ipynb 檔案上傳至作業網站中的 downloads 目錄後, 完成提交推送至 Github 後, 將連結附加在 <a href="https://nbviewer.org/urls/">https://nbviewer.org/urls/</a> 之後.</p>
<p>將 .ipynb 檔案內容放入個人 Github 帳號下的 Gist 後, , 將連結附加在 <a href="https://nbviewer.org/urls/">https://nbviewer.org/urls/</a> 之後.</p>
<p>例如: 以下提供 Gist 中的 .ipynb</p>
<p style="padding-left: 30px;"><a href="https://nbviewer.org/urls/gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/a7f40c0fd78b7f969021fdcf234087c9d21d7ad3/01_string_input_print.ipynb">01_string_input_print.ipynb</a></p>
<h3>Notebook</h3>
<p>電子書: <a href="https://mde.tw/cp2024/downloads/learn_python_with_jupyter.pdf">Learn Python with Jupyter</a> (5.6MB)</p>
<p>教材介紹: <a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Introducing "Learn Python with Jupyter"</a></p>
<p>教材網站: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a></p>
<hr/>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/01_string_input_print.ipynb">01_string_input_print.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/02_variables.ipynb">02_variables.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/03_list_if_in_else.ipynb">03_list_if_in_else.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/04_list_append_remove.ipynb">04_list_append_remove.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/05_list_index_pop_insert.ipynb">05_list_index_pop_insert.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/06_list_slicing.ipynb">06_list_slicing.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/07_list_slicing_use.ipynb">07_list_slicing_use.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/08_for_range.ipynb">08_for_range.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/09_for_loop_if_equals.ipynb">09_for_loop_if_equals.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/10_for_search.ipynb">10_for_search.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/11_for_change_list.ipynb">11_for_change_list.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/12_for_create_list.ipynb">12_for_create_list.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/13_numbers.ipynb">13_numbers.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/14_list_of_numbers.ipynb">14_list_of_numbers.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/15_random.ipynb">15_random.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/16_intro_to_algos.ipynb">16_intro_to_algos.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/17_while_loop.ipynb">17_while_loop.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/18_while_conditions.ipynb">18_while_conditions.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/19_combining_conditions.ipynb">19_combining_conditions.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/20_booleans.ipynb">20_booleans.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/21_list_overview.ipynb">21_list_overview.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/22_for_overview.ipynb">22_for_overview.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/23_list_of_lists.ipynb">23_list_of_lists.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/24_dictionaries.ipynb">24_dictionaries.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/25_dictionary_list.ipynb">25_dictionary_list.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/26_dictionary_use.ipynb">26_dictionary_use.ipynb</a></p>
<p><a href="https://nbviewer.org/urls/mde.tw/cp2024/downloads/notebook/27_strings_overview.ipynb">27_strings_overview.ipynb</a></p>
<h2>Wink</h2>
<p>wink_ffmpeg.reg 設定檔案內容:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Windows Registry Editor Version 5.00
 
[HKEY_CURRENT_USER\SOFTWARE\Debugmode]
 
[HKEY_CURRENT_USER\SOFTWARE\Debugmode\Wink\Settings]
"FfmpegPath"="y:\\sharex\\ffmpeg.exe"</pre>
<p><a href="/downloads/start_ipv6_wink_reg.7z">start_ipv6_wink_reg.7z</a></p>
<p>頁面中嵌入 Wink 影片 html:</p>
<p><a href="/downloads/wink_html_on_editor.txt">wink_html_on_editor.txt</a></p>
<h2>W&amp;H</h2>
<p>為什麼學習 Python, 如何應用 Python?</p>
<p><a href="http://229.cycu.org/40723210_2018.7z">40723210_2018.7z</a> (<a href="https://github.com/s40723210/cp2018">https://github.com/s40723210/cp2018</a>)</p>
<p><a href="https://www.verytechnology.com/iot-insights/why-mechanical-engineers-should-embrace-python-programming">https://www.verytechnology.com/iot-insights/why-mechanical-engineers-should-embrace-python-programming</a></p>
<p><a href="https://www.udemy.com/course/python-for-mechanical-engineers">Python for Mechanical Engineers</a> (機械工程師 (適用) 的 Python) - <a href="https://youtu.be/WFwH0d-Q2NY">Video1</a>, <a href="https://youtu.be/3RxoTim2PgM">Video2</a></p>
<p style="padding-left: 30px;">Python installation</p>
<p style="padding-left: 30px;">Basics of Python</p>
<p style="padding-left: 60px;">Data Types in Python<br/>Loops - For Loop<br/>Loops - If Loop<br/>Loops _While Loop<br/>Functions in Python</p>
<p style="padding-left: 30px;">Numpy library - Working with Arrays and Matrices</p>
<p style="padding-left: 30px;">Ploting with Matplotlib</p>
<p style="padding-left: 30px;">Programs on Mechanics and Machine Design</p>
<p style="padding-left: 30px;">Programs on Mechanical Vibration</p>
<p style="padding-left: 30px;">Programs on Thermal System</p>
<p style="padding-left: 30px;">Engineering Math</p>
<p style="padding-left: 30px;">Advanced Engineering Programs</p>
<p><a href="https://www.coursera.org/learn/python#modules">Python for Everyone</a> (所有人 (適用) 的 Python)</p>
<p style="padding-left: 30px;">Why we program?</p>
<p style="padding-left: 30px;">Installing Python</p>
<p style="padding-left: 30px;">Variables and Expressions</p>
<p style="padding-left: 30px;">Conditional Code</p>
<p style="padding-left: 30px;">Functions</p>
<p style="padding-left: 30px;">Loops and Iteration</p>
<p>Why and How?</p>
<p>設計運算:</p>
<p style="padding-left: 30px;"><a href="https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/">https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/</a> (一般工程運算)</p>
<p style="padding-left: 30px;"><a href="/downloads/fem_and_rk4.7z">fem_and_runge-kutta.7z</a></p>
<p style="padding-left: 30px;"><a href="/downloads/meArm_robot_ik_sympy.7z">meArm_robot_ik_sympy.7z</a></p>
<p style="padding-left: 30px;"><a href="/downloads/stl_splliter.7z">stl_splliter.7z</a> (S<a href="https://en.wikipedia.org/wiki/STL_(file_format)">TL 格式</a>組立件拆解)</p>
<p style="padding-left: 30px;"><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a> (平面機構合成)</p>
<p>控制與模擬:</p>
<p style="padding-left: 30px;"><a href="https://docs.wokwi.com/">https://docs.wokwi.com/</a> (機電控制系統模擬)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cad2024/content/CoppeliaSim.html">https://mde.tw/cad2024/content/CoppeliaSim.html</a> (機電系統模擬)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/PyWeb3D">https://github.com/mdecycu/PyWeb3D</a> (3D 造型模擬)</p>
<p style="padding-left: 30px;"><a href="https://thebookofshaders.com/?lan=ch">https://thebookofshaders.com/?lan=ch</a> (著色運算)</p>
<p>內容管理:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> (內容管理系統)</p>
<p style="padding-left: 30px;"><a href="https://www.odoo.com">https://www.odoo.com</a> (企業管理系統)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/pj5073">https://github.com/mdecycu/pj5073</a> (內容管理系統)</p>
<p>CAD 套件應用延伸:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cad2024/content/NXOpen.html">https://mde.tw/cad2024/content/NXOpen.html</a> (利用程式建立零組件)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/nxopen">https://github.com/mdecycu/nxopen</a></p>
<h3>DC</h3>
<p>Design Calculation</p>
<p>設計運算:</p>
<p><a href="https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/">https://www.studysmarter.co.uk/explanations/engineering/design-engineering/design-calculation/</a> (一般工程運算)</p>
<p><a href="/downloads/fem_and_rk4.7z">fem_and_runge-kutta.7z</a> (有限元素分析與 Runge-Kutta 數值分析)</p>
<p><a href="/downloads/meArm_robot_ik_sympy.7z">meArm_robot_ik_sympy.7z</a> (符號式逆向運動分析)</p>
<p><a href="/downloads/stl_splliter.7z">stl_splliter.7z</a> (S<a href="https://en.wikipedia.org/wiki/STL_(file_format)">TL 格式</a>組立件拆解)</p>
<p><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a> (平面機構合成)</p>
<h2>AI</h2>
<p>From <a href="https://chatgpt.com">ChatGPT</a>:</p>
<p data-pm-slice="1 1 []"><span style="background-color: #ccffcc;">請條列出您對於初學計算機程式課程的機械設計工程系大一學生的建議</span>:</p>
<p data-pm-slice="1 1 []" style="padding-left: 30px;">1. 選擇適合的編程語言<br/><br/>    Python：簡單易學，語法直觀，適合初學者。<br/>    C/C++：常見於工程應用，有助於理解底層運作原理。<br/><br/>2. 打好基礎概念<br/><br/>    變數和數據類型：了解不同類型數據的存儲和操作方式。<br/>    控制結構：如條件語句(if-else)和循環(for, while)。<br/>    函數：學會如何定義和調用函數，提高代碼重用性。<br/><br/>3. 理解數據結構和算法<br/><br/>    基本數據結構：如陣列、鏈結串列、堆疊、佇列等。<br/>    常見算法：如排序、搜索算法，這些都是解決複雜問題的基礎。<br/><br/>4. 多做練習<br/><br/>    編程題目：如LeetCode、HackerRank等網站上的練習題。<br/>    實際項目：嘗試參與簡單的項目或課程作業，應用所學知識。<br/><br/>5. 理解機械設計與編程的結合<br/><br/>    CAD軟體插件：學習如何用編程來擴展CAD軟體功能。<br/>    模擬和分析工具：如MATLAB，用於數據分析和模擬。<br/><br/>6. 保持好奇心和耐心<br/><br/>    持續學習：編程是一門不斷發展的技術，保持對新技術的好奇心。<br/>    解決問題：學會從錯誤中學習，每次Debug都是一次成長的機會。<br/><br/>7. 參與學習社群<br/><br/>    線上論壇：如Stack Overflow，獲取幫助和資源。<br/>    學校社團：參與校內相關的編程或工程設計社團，增加實踐機會。<br/><br/>8. 管理好學習時間<br/><br/>    制定計劃：安排好學習進度，每天或每週都有固定的編程時間。<br/>    勞逸結合：合理安排休息時間，保持身心健康。<br/><br/>9. 掌握基礎工具<br/><br/>    編輯器和IDE：如VS Code, PyCharm等，選擇一個適合自己的開發環境。<br/>    版本控制：學習使用Git，便於代碼管理和協作。<br/><br/>10. 不斷提升<br/><br/>    參加競賽：如編程競賽或機械設計比賽，提升自己的實力。<br/>    實習經驗：嘗試找實習或參與實際項目，積累工作經驗。</p>
<p><span style="background-color: #ccffcc;">接下來請一律使用中文繁體用語回答, 請就"Python：簡單易學，語法直觀，適合初學者。" 仔細說明緣由,  Python 對機械設計領域有何用處, 並且舉出實例, 而且列出範例原始碼說明</span>.</p>
<p style="padding-left: 30px;">Python：簡單易學，語法直觀，適合初學者的緣由:</p>
<p style="padding-left: 30px;">緣由說明</p>
<p style="padding-left: 30px;">語法簡單明瞭：Python的語法設計注重可讀性，使用縮排來表示程式塊，而非繁瑣的括號或關鍵字，使代碼結構清晰易懂。</p>
<p style="padding-left: 30px;">動態類型語言：變數在使用前無需宣告類型，簡化了代碼撰寫和維護過程。</p>
<p style="padding-left: 30px;">豐富的標準庫：Python擁有大量的標準庫和第三方庫，涵蓋了網路、檔案處理、數據分析、機器學習等多方面功能，初學者可以方便地使用這些庫來完成複雜的任務。</p>
<p style="padding-left: 30px;">龐大的社群支持：Python社群活躍，有大量的學習資源、教程和範例代碼，初學者遇到問題時可以輕鬆找到幫助。<br/><br/>Python對機械設計領域的用處</p>
<p style="padding-left: 30px;">用途說明</p>
<p style="padding-left: 30px;">自動化任務：Python可以用來自動化重複性工作，如文件處理、數據轉換、報告生成等，節省時間和提高效率</p>
<p style="padding-left: 30px;">數據分析與可視化：利用 Python 的數據分析和可視化庫（如 Pandas、Matplotlib、Seaborn），可以輕鬆地進行數據處理、分析和圖表繪製，輔助設計決策。</p>
<p style="padding-left: 30px;">CAD軟體插件開發：Python可用於開發 CAD 軟體（如 AutoCAD、SolidWorks）的插件，擴展其功能，實現定制化的設計需求。</p>
<p style="padding-left: 30px;">數值計算與模擬：使用 NumPy、SciPy 等科學計算庫，可以進行複雜的數值計算和模擬，解決工程中的數學問題。<br/><br/>實例與範例原始碼</p>
<p style="padding-left: 30px;">實例一：數據分析與可視化</p>
<p style="padding-left: 30px;">假設我們有一組機械零件的測量數據，需分析其尺寸分佈情況。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# 創建假設的數據集
data = {
    '零件編號': ['A', 'B', 'C', 'D', 'E'],
    '長度(mm)': [50.5, 49.8, 50.1, 50.0, 49.9],
    '寬度(mm)': [20.2, 20.0, 20.3, 20.1, 20.2]
}
df = pd.DataFrame(data)

# 數據分析
mean_length = df['長度(mm)'].mean()
mean_width = df['寬度(mm)'].mean()

print(f'平均長度: {mean_length} mm')
print(f'平均寬度: {mean_width} mm')

# 數據可視化
plt.figure(figsize=(10, 5))
sns.barplot(x='零件編號', y='長度(mm)', data=df)
plt.title('零件長度分佈')
plt.show()
</pre>
<p>這段代碼創建了一個假設的機械零件測量數據集，並計算其平均長度和寬度，最後使用 Seaborn 程式庫生成長度分佈圖。</p>
<p>計算機械零件測量數據的平均長度和寬度，以及生成長度分佈圖，可以在機械設計和製造過程中有多種用途：</p>
<p style="padding-left: 30px;">1. 質量控制與檢驗<br/><br/>在生產過程中，測量零件的尺寸並計算其平均值和分佈情況，有助於確認產品是否符合設計規範和質量標準。若有偏差，可以及時調整製造工藝，減少次品率。</p>
<p style="padding-left: 30px;">2. 設計改進<br/><br/>分析零件的實際尺寸數據，可以幫助工程師了解製造過程中的偏差，從而改進設計，提高產品的精度和可靠性。</p>
<p style="padding-left: 30px;">3. 統計分析<br/><br/>透過統計分析零件的測量數據，工程師可以識別出生產中的異常情況，如機器故障或操作問題，並採取相應措施進行修正。</p>
<p style="padding-left: 30px;">4. 預測與決策支持<br/><br/>統計數據可以作為製造過程中決策支持的依據，例如調整加工參數、預測壽命、安排維護等。</p>
<p style="padding-left: 30px;">5. 供應鏈管理<br/><br/>了解零件的尺寸分佈，可以幫助企業在供應鏈管理中進行更好的採購和庫存管理，確保供應鏈的穩定性和高效性。</p>
<p>了解零件的尺寸分佈可以在供應鏈管理中提供多方面的幫助，進行更好的採購和庫存管理的原因如下：</p>
<p style="padding-left: 30px;">1. 確保品質穩定<br/><br/>了解零件的尺寸分佈可以確保所採購的零件符合設計規格和品質標準。若尺寸分佈出現較大偏差，可以及時與供應商溝通，確保產品質量穩定，避免因不合格零件導致的生產問題。</p>
<p style="padding-left: 30px;">2. 減少庫存成本<br/><br/>精確的尺寸數據可以幫助企業更準確地預測零件的需求，避免因過度採購導致的庫存積壓，或因庫存不足而影響生產。這有助於降低庫存成本，提高資金利用效率。</p>
<p style="padding-left: 30px;">3. 提高生產效率<br/><br/>了解零件的尺寸分佈可以及早發現可能的質量問題，從而及時調整生產計劃，避免因不合格零件進入生產線而引發的停工或返工問題，提升生產效率。</p>
<p style="padding-left: 30px;">4. 優化供應鏈合作<br/><br/>透過分析零件尺寸分佈，企業可以與供應商合作進行質量改進，提升整體供應鏈的運營效率。透明的數據交流有助於建立更好的合作關係，達到雙贏效果。</p>
<p style="padding-left: 30px;">5. 制定採購策略<br/><br/>根據零件尺寸分佈情況，企業可以制定更精確的採購策略。例如，若某一批次的零件尺寸分佈較為穩定，企業可以考慮與該供應商加強合作，進行批量採購，從而獲得更好的價格優惠。</p>
<p style="padding-left: 30px;">6. 風險管理<br/><br/>了解零件的尺寸分佈還可以幫助企業識別供應鏈中的潛在風險，及早制定應對策略。例如，如果發現某供應商的零件尺寸波動較大，可以考慮尋找備選供應商，以減少供應風險。</p>
<p style="padding-left: 30px;">具體範例說明<br/><br/>假設一家公司需要採購大量的螺栓進行組裝，並且這些螺栓的尺寸需要非常精確才能保證產品的可靠性。公司可以通過以下步驟進行供應鏈管理：<br/><br/>1. 數據收集與分析</p>
<p style="padding-left: 30px;">公司定期收集每批次螺栓的尺寸數據，並使用 Python 進行分析和可視化，了解螺栓的尺寸分佈情況。<br/><br/>2. 品質控制</p>
<p style="padding-left: 30px;">如果某一批次的螺栓尺寸分佈偏離設計規格，公司可以立即通知供應商，要求進行改進，並且可以拒收不合格的產品，確保進入生產線的零件都符合標準。<br/><br/>3. 庫存管理</p>
<p style="padding-left: 30px;">通過分析歷史數據，公司可以預測未來的螺栓需求，合理安排採購計劃，避免庫存積壓或短缺。例如，如果某些時間段的需求量較大，公司可以提前增加庫存，平衡供需。<br/><br/>4. 供應商評估</p>
<p style="padding-left: 30px;">根據每個供應商提供螺栓的尺寸穩定性和合格率，公司可以進行供應商評估，選擇優質供應商，建立長期合作關係，同時淘汰質量不穩定的供應商。</p>
<h2>Servers</h2>
<p>在 Windows 中由管理者身分啟動的命令列, 可以利用 net user username password /add 建立登入帳號.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># Switching to openssl
# https://github.com/desktop/desktop/issues/3260
[http "https://github.com"]
    sslVerify = false</pre>
<p>Windows 的啟動目錄:</p>
<p>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup</p>
<p>read_stud_id.ps1</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># 讀取檔案，使用 -Delimiter 參數以 Tab 隔開
$data = Import-Csv -Path "Y:\tmp\create_users\list_2b.txt" -Delimiter "`t" -Header "Column1", "StudentID"

# 提取第二個欄位（學號）並將結果存儲到新檔案
$data.StudentID | Set-Content -Path "Y:\tmp\create_users\user_id.txt"

Write-Host "學號已成功提取並儲存到 user_id.txt"
</pre>
<p>gen_stud_id_password.ps1</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># 讀取學號檔案
$studentIds = Get-Content -Path "Y:\tmp\create_users\2b_user_id.txt"

# 初始化結果陣列
$results = @()

# 隨機生成密碼的函數
function Generate-RandomPassword {
    $length = 4
    # 排除容易混淆的字符
    $characters = 'abcdeghkmnpqrstuvwxyABCDEFGHKLMNPQRSTUVWXY3456789'
    $password = -join ((Get-Random -Count $length -InputObject $characters.ToCharArray()) | ForEach-Object { $_ })
    return $password
}

# 遍歷每個學號並生成密碼
foreach ($id in $studentIds) {
    $password = Generate-RandomPassword
    $results += "$id,$password"
}

# 將結果寫入檔案
$results | Set-Content -Path "Y:\tmp\create_users\2b_id_pass_name.txt"

Write-Host "學號和密碼已成功生成並儲存到 output.txt"
</pre>
<p>create_users.ps1</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># 讀取檔案
$users = Get-Content -Path "Y:\tmp\create_users\users.txt"

foreach ($user in $users) {
    # 分割行資料
    $parts = $user -split ","
    $account = $parts[0]
    $password = $parts[1]
    $name = $parts[2]

    # 檢查用戶是否已存在
    if (-not (Get-LocalUser -Name $account -ErrorAction SilentlyContinue)) {
        # 創建用戶
        New-LocalUser -Name $account -Password (ConvertTo-SecureString $password -AsPlainText -Force) -FullName $name -Description "User account for $name"
        
        # 創建用戶目錄
        $userFolder = "C:\Users\$account"
        New-Item -Path $userFolder -ItemType Directory -Force

        # 設定目錄權限
        $acl = Get-Acl $userFolder
        $acl.SetOwner([System.Security.Principal.NTAccount]::new($account))
        Set-Acl -Path $userFolder -AclObject $acl
        
        # 設定用戶對資料夾的訪問權限
        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($account, "FullControl", "Allow")
        $acl.AddAccessRule($accessRule)
        Set-Acl -Path $userFolder -AclObject $acl
        
        # 可選：將用戶添加到特定群組
        # Add-LocalGroupMember -Group "Users" -Member $account
    } else {
        Write-Host "用戶 $account 已存在，跳過..."
    }
}
</pre>
<p>install_and_setup_openssh_server.ps1</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH*'

Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0

Start-Service sshd

Set-Service -Name sshd -StartupType 'Automatic'

New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22

Get-Service sshd
</pre>
<h3>Linux</h3>
<p>以下為 vi 編輯器的基本使用說明:</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_vi" height="800" muted="true" width="1000">
<source src="/downloads/vi_editor.mp4" type="video/mp4"/></video></div>
<h4>SSH keys</h4>
<p>在 Windows 或 Linux 建立 openssh keys 都可以使用 ssh-keygen 指令</p>
<p>在 Windows 環境下, 希望遠端登入 (remote login) 到另外一台已經啟動 ssh server 的主機, 可以使用 ssh 指令外 (此地的 ssh 指令為 client) , 在 Windows 也可以使用 putty 套件工具進行遠端登入.</p>
<p>另外 Windows  sftp (安全的檔案傳輸協定 client) <span>除了透過命令列指令, 在 Windows 也可以使用 filezilla 套件工具, 能夠以 sftp client 指令遠端登入到 s1511.cycu.org, 表示遠端伺服器已經安裝 sftp 伺服器並且啟動.</span></p>
<p>在 s1511.cycu.org 建立 keys 的原因, 是希望能夠直接利用 OpenSSH 的協定, 對 github 中的倉儲 push.</p>
<p>因為 github.com 只支援 IPv4, 而 s1511.cycu.org 只支援 IPv6, 因此在 s1511 主機上要利用各種網路 client 對 github.com 進行連結或交換檔案, 都必須針對各種 client 設定代理主機, 其中包括 ssh client, sftp client, git client, https client (也就是全球資訊網瀏覽器)等.</p>
<p>但 s1511.cycu.org 主機中已經透過 /etc/environment 設定 http 與 https 連線所需的代理主機, 使用者只需要自行處理 ~.ssh/config 中的 ssh 協定代理主機設定即可.</p>
<p>/etc/environment 中有關 http 與 https 的代理主機設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
http_proxy=http://p4.cycu.org:3128
https_proxy=http://p4.cycu.org:3128</pre>
<h4>git clone</h4>
<p>SSH 代理主機與 https 代理主機設定</p>
<p>假如處理好 .ssh/config, .ssh/id_rsa 與 .ssh/id_rsa.pub 的設定, 各用戶就可以利用下列指令, 以 SSH 協定取下 cp2023:</p>
<p style="padding-left: 30px;">git clone --recurse-submodules <a href="mailto:git@github.com:scrum-1/cp2023.git">git@github.com:scrum-1/cp2023.git</a></p>
<p>取下的倉儲內容, 包含子模組將會放入 cp2023 目錄.</p>
<h4>server.py</h4>
<p>內部埠號與外部埠號</p>
<p>列出使用 python3 啟動的服務:</p>
<p>ps -ef | grep python3</p>
<p>當使用 python3 server.py &amp; 執行 process 後, ps -axo pid,comm,uname | grep "python3" 的指令, 可以列出各自帳號下所 background 執行的 process pid, 若需要列出執行 process 對應目錄, 則可以利用 pwdx 加上 pid 後執行取得.</p>
<p>ps -axo : <a href="https://explainshell.com/explain?cmd=ps+-axo+pid%2Crss%2Ccommand">https://explainshell.com/explain?cmd=ps+-axo+pid%2Crss%2Ccommand</a></p>
<p>pwdx : <a href="https://www.cyberciti.biz/faq/unix-linux-pwdx-command-examples-usage-syntax/">https://www.cyberciti.biz/faq/unix-linux-pwdx-command-examples-usage-syntax/</a></p>
<p>kill: <a href="https://www.geeksforgeeks.org/kill-command-in-linux-with-examples/">https://www.geeksforgeeks.org/kill-command-in-linux-with-examples/</a></p>
<h4>git commit</h4>
<p>git config --global user.email and user.name</p>
<p>acp 權限與 public_html 目錄中的倉儲內容</p>
<p>使用者目錄 (711) 與 public_html (755) 目錄權限</p>
<p><a href="https://link.springer.com/content/pdf/10.1007/978-1-4842-5064-8_1.pdf">Intro to C</a> (on Springer)</p>
<h3>ANSIC</h3>
<p>利用 MSYS2 編譯 Tiny C Compiler 並配置 gd 程式庫環境:</p>
<p>從 <a href="https://github.com/Tiny-C-Compiler/mirror-repository">https://github.com/Tiny-C-Compiler/mirror-repository</a> 下載 Tiny C Compiler 0.9.27 原始碼後, 利用 win32 目錄中的 build-tcc.bat 完成編譯.</p>
<p>在 MSYS2 環境中, 執行 mingw64.exe 後, 以 pacman -S mingw-w64-x86_64-libgd 安裝 gd 程式庫後, 在 Y:\msys64\mingw64\bin 可以取得 2.3.3 版的 libgd.dll</p>
<p>利用 tcc -impdef -v libgd.dll -o libgd.def 取得 libgd.def 放入 Tiny C Compiler 系統中 win32 目錄中的 lib 後, 配合 gd 系統的 header 檔案後, 就可以利用 tcc gd_roc_flag.c -lgd 編譯連結後取得 gd_roc_flag.exe 可執行檔案. 之後則必須配合 libgd.dll 與 MSYS2 相關 dll 檔案執行 gd_roc_flag.exe</p>
<p>下載 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbKDl4ElS8FDkrBwRbPTQCQBu-KoWRHVabZ79hwE5Woaaw?e=1obiXK">MSYS2 編譯的 Tiny C Compiler 0.9.27 與 gd 程式庫 2.3.3 可攜套件</a> (需要下載密碼)</p>
<p>假如希望利用 Visual Studio C++ 編譯 gd 2.3.3 版程式庫, 請參考<a href="https://github.com/libgd/libgd/blob/master/windows/readme.md">這裡的說明</a>.</p>
<p>Reference:</p>
<p style="padding-left: 30px;"><a href="https://github.com/phoenixthrush/Tiny-C-Compiler">https://github.com/phoenixthrush/Tiny-C-Compiler</a> </p>
<p style="padding-left: 30px;"><a href="https://packages.msys2.org/package/mingw-w64-x86_64-libgd">https://packages.msys2.org/package/mingw-w64-x86_64-libgd</a> </p>
<hr/>
<p><a href="/downloads/tcc_wscite_gd_library.exe">tcc_wscite_gd_library.exe</a></p>
<p><a href="/downloads/tcc_wscite_gd_library.7z.001">tcc_wscite_gd_library.7z.001</a></p>
<p><a href="/downloads/tcc_wscite_gd_library.7z.002">tcc_wscite_gd_library.7z.002</a></p>
<p><a href="/downloads/tcc_wscite_gd_library.7z.003">tcc_wscite_gd_library.7z.003</a></p>
<p><a href="/downloads/tcc_wscite_gd_library.7z.004">tcc_wscite_gd_library.7z.004</a></p>
<p>利用 .exe 解開壓縮後, 取得 tcc 與 wscite, 可以使用 tcc roc_flag_in_gd.c -lgd 建立 roc_flag_in_gd.exe, 結合 tcc\gd_needed_dll 目錄中的 .dll 動態連結程式庫, 可以利用 gd 程式庫, 以 Tiny C 編譯器完成 ANSI C 程式繪圖.</p>
<p></p>
<h1>Topics</h1>
<p>HW Template:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecp2024/hw-mdecycu">https://github.com/mdecp2024/hw-mdecycu</a></p>
<p style="padding-left: 30px;"><a href="https://mdecp2024.github.io/hw-mdecycu">https://mdecp2024.github.io/hw-mdecycu</a></p>
<hr/>
<h4>Topic 1: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載可攜程式套件 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;">以下兩個影片說明如何利用 Codespaces 維護個人的作業倉儲 (影片中以 mdecad2024 作業團隊為例, 配合計算機程式課程使用, 作業倉儲則位於 mdecp2024 團隊帳號下)</p>
<p style="padding-left: 30px;">Codespaces 維護作業倉儲教學片一:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/zRcEB9ac5hk?si=y6uTZhoL1T48_R4e" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">Codespaces 維護作業倉儲教學影片二:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/a0u8eD3GWAc?si=5CUlpQoTu8TGLW8b" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">1a w3 說明如何利用 Codespaces 維護作業網站:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3ru8PlKYlnQ?si=o78qsBz86XzeeH6G" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">以下兩個影片說明如何利用可攜程式環境在近端電腦維護作業倉儲內容:</p>
<p style="padding-left: 30px;">Localhost 維護作業倉儲教學影片一:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/P6EQkLQ5nhw?si=qJqCrjDAbHNrC2SA" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">Localhost 維護作業倉儲教學影片二:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/gZMqQMMXEfc?si=EZSYz-lAQ8pCeGbF" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<h4>Topic 2: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<h4>Topic 3: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<h4>Topic 4: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<h4>Final Report: 期末口頭與書面專題報告 (20%)</h4>
<h2>Repository</h2>
<p>計算機程式課程中的作業將透過 Github Classroom 派送, 使用者必須登入 Github 後, 透過作業連結取得倉儲, 而此倉儲帶有採 Python Flask 框架所編寫的內容管理系統, 使用者可以利用 Github Codespaces 或近端的可攜程式套件進行網頁、網誌以及簡報檔的編輯與管理.</p>
<p>採 Github Codespaces 維護作業網站內容:</p>
<ol>
<li>使用<a href="https://github.com/pricing">免費方案</a>時, 必須了解相關限制</li>
<li>使用 2 cores 的虛擬機器, 每個月只能使用 60 小時</li>
<li>系統採用 Visual Studio Code, 支援多個終端機, 操作指令為 Linux</li>
<li>由作業倉儲端進入 Codespaces 介面, 使用者無需設定倉儲管理權限</li>
<li>執行倉儲的動態網站後, 可在分組團隊間協同管理網站內容</li>
<li>動態網站網址採亂數設定, 使用者無需修改網站的管理密碼 (內建為 admin)</li>
</ol>
<p>採近端可攜程式環境維護網站內容:</p>
<ol>
<li>可以在任何連網的 64 位元 Windows 操作系統中使用</li>
<li>可以透過 Token 或 SSH 設定, 取得作業倉儲的管理權限</li>
<li>若採用電腦的外部 IP 位址啟動, 執行倉儲後的動態網站, 必須修改管理密碼</li>
</ol>
<p>操作影片 Demo:</p>
<h2>Topic 1</h2>
<h4>基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p><img alt="" height="467" src="/images/github_multi_site_version_control.png" width="400"/></p>
<p><a href="/downloads/github_multi_site_version_control_dia.7z">github_multi_site_version_control_dia.7z</a></p>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<p><span>參考資料:</span></p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/@-kmolab9376/videos">https://www.youtube.com/@-kmolab9376/videos</a></p>
<p>討論:</p>
<p style="padding-left: 30px;">目前的作業倉儲編輯程式, 使用 https adhoc 動態授權, 請深入了解若改用靜態 https 授權, 執行速度會快多少?</p>
<p style="padding-left: 60px;">透過 ChatGPT 提問: 大約縮短 20%-50% 執行時間</p>
<p style="padding-left: 60px;">將 cmsimde\wsgi.py 中的 adhoc https 改為靜態檔案授權:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#flaskapp.app.run(host=ip, port=port, debug=True, ssl_context="adhoc")
flaskapp.app.run(host=ip, port=port, debug=True, ssl_context=('cert.pem', 'key.pem'))</pre>
<p style="padding-left: 60px;">必須在倉儲根目錄提供 cert.pem 與 key.pem:</p>
<p style="padding-left: 60px;">openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</p>
<p style="padding-left: 30px;">使用 USB 隨身碟執行作業倉儲內容改版的速度, 與直接利用 C:\ 固態硬碟執行的速度差多少? 假如可攜程式系統希望儘量使用 C:\ 固態硬碟執行, 但需要作業倉儲與其他必須自行帶著的資料放入 USB 隨身碟, 該如何進行?</p>
<p style="padding-left: 60px;">透過 ChatGPt 提問: 固態硬碟執行速度可能快 USB 3.0 隨身碟快 3-10 倍.</p>
<p style="padding-left: 60px;">有關如何利用電腦輔助設計室中電腦固態硬碟提升執行速度, 請參考: <a href="https://mde.tw/cp2024/content/cmsimde.html">https://mde.tw/cp2024/content/cmsimde.html</a> 中的說明.</p>
<h3>Codespaces</h3>
<p>登入 Github 帳號後, 可以至 <a href="https://github.com/codespaces">https://github.com/codespaces</a> 檢查所建立的 Codespaces.</p>
<p>Codespaces 是附屬在 Github 倉儲下的雲端整合開發環境, 首次建立時系統會主動安裝特定的 Python 模組, 但若需要在 Codespaces 中執行 python main.py 啟動編輯網頁, 則必須利用:</p>
<p>pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p>安裝啟動 cmsimde 編輯網頁所需的 Python 模組. 安裝結束後, 就可以利用 python main.py 執行動態編輯網站, 而 python main2.py 則可以啟動目前位於 Codespaces 環境中的靜態網站.</p>
<hr/>
<p>當使用者完成動態網站內容的編輯後, 必須利用 Convert 將 /config/content.htm 進行分頁, 並將各頁面超文件檔案存入 content 目錄中.</p>
<p>若使用者在多個地方維護倉儲, 例如: Codespaces 與近端可攜程式環境, 執行動態網站編輯之前, 可以利用 git pull 從 Github 倉儲取下目前最新的版本資料.</p>
<hr/>
<p>由於 Codespaces 中的操作系統為 Linux, 進行編輯網頁啟動、靜態網站啟動與改版內容新增提交與推送時, 必須了解與 Linux 有關的基本概念:</p>
<p>Codespaces 啟動後, 其終端機的回應 (Prompt) 會位於對應倉儲所在的目錄.</p>
<p>每一個檔案與目錄都利用 10 個字元來表示其屬性, 例如:</p>
<p>drwxrwxrwx 或 -rwxrwxrwx 等十個字元, 其中第一個字元若為 d, 表示為目錄 (directory), 其餘 9 個字元則每一組三個字元, 分別從左至右, 依序表示為 user, group 或 other 等三種身分的 r (read) 權限、w (write) 權限 以及 x (execution) 權限, 也就是讀、寫以及執行的權限.</p>
<p>若要改變某一檔案或目錄的權限, 可以使用:</p>
<p>chmod u+x acp 表示要針對 acp 檔案, 令 user 擁有執行 (x) 的權限.</p>
<p>利用 Codespaces 維護作業倉儲的相關資料與步驟:</p>
<p><span style="background-color: #fdd472;">執行環境</span>所需模組:</p>
<ol>
<li>作業倉儲是採 <a href="https://github.com/mdecycu/cmsimde" rel="noreferrer noopener" target="_blank" title="https://github.com/mdecycu/cmsimde">cmsimde</a> 網際內容管理搭建, 以 Python 編寫, 需要 flask flask_cors bs4 lxml pelican markdown 等模組才能執行. 有關這些模組的功能與用法可以透過 AI 詢問: "請用繁體中文用語回答, 以下 Python 模組分別有哪些功能? flask flask_cors bs4 lxml pelican markdown gevent".</li>
<li>在可攜程式環境中的 Python 10 已經事先安裝這些模組, 而 Codespaces 虛擬主機中, 使用者必須自行透過 "pip install flask flask_cors bs4 lxml pelican markdown gevent" 指令安裝這些模組, 其中的 pip 是 Python 模組安裝指令, 利用 pip install 加上模組名稱指定安裝.</li>
</ol>
<p>如何啟動<span style="background-color: #fdd472;">編輯網站</span>, 如何觀看轉檔後的<span style="background-color: #fdd472;">靜態網站</span>:</p>
<ol>
<li>一旦工作環境允許啟動作業倉儲中的編輯網站, 在 Codespaces 必須利用 python main.py 執行編輯網站, 並且利用 python main2.py 觀看當時已經編輯告一段落的靜態網站. </li>
<li>假如是在近端, 則可以利用 python cmsimde/wsgi.py 直接啟動, 或者利用 cms 批次檔案啟動編輯網站.</li>
<li>另外, 在可攜程式環境則可以利用 python -m http.server 直接在倉儲根目錄觀看當時的靜態網站內容.</li>
</ol>
<p><span style="background-color: #fdd472;">提交</span>時綁定的 Github 使用者<span style="background-color: #fdd472;">身分</span>, 以及是否具有<span style="background-color: #fdd472;">推送</span>該倉儲至 Github 的<span style="background-color: #fdd472;">權限</span>:</p>
<ol>
<li>當使用者結束某一階段的作業網站編輯, 可以利用 git 指令將改版內容推向 Github 倉儲:</li>
<li>假如是在 Codespaces, 因為使用者必須登入 Github 才能使用 Codespaces, 因此執行 git add, git  commit 與 git push 時, 無需表明身分, 也不用設定對提交推送倉儲的管理權限.</li>
<li>但是若在可攜程式環境中, 使用者必須透過 git config 設定提交身分,並且需要使用 https 或 SSH 方法設定對該目標倉儲的管理權限.</li>
</ol>
<p>最後要提醒的是: 為了取分, 請在每週<span style="background-color: #fdd472;">上課前後至少各提交推送一次版本</span>, 而且要<span style="background-color: #fdd472;">具體說明</span>該次提交的改版摘要說明.</p>
<p></p>
<p>以下兩個影片說明如何利用 Codespaces 維護個人的作業倉儲 (影片中以 mdecad2024 作業團隊為例, 配合計算機程式課程使用, 作業倉儲則位於 mdecp2024 團隊帳號下)</p>
<p>Codespaces 維護作業倉儲教學片一:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/zRcEB9ac5hk?si=y6uTZhoL1T48_R4e" title="YouTube video player" width="560"></iframe></p>
<p>Codespaces 維護作業倉儲教學影片二:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/a0u8eD3GWAc?si=5CUlpQoTu8TGLW8b" title="YouTube video player" width="560"></iframe></p>
<h3>Portable</h3>
<p>使用 Codespaces 雲端整合程式環境維護作業倉儲的好處是, 近端電腦只需要開啟瀏覽器, 不需要準備任何執行編輯網站的程式, 但是連線的電腦必須全時上網, 而且使用免費的 Github 帳號登入後, 啟動 Codespaces 的每月免費 core hours 目前只有 120 個單位, 以最小的 2 core 虛擬主機計, 每一個免費 Github 帳號每月可免費使用 Codespaces 的時數只有 60 小時.</p>
<p>使用時數受限的問題, 若利用近端電腦中的可攜程式套件維護作業倉儲, 只要在 git clone 作業倉儲到近端, 以及將改版的單一提交或多次提交 push 到 Github 時連網, 其餘使用者進行作業網頁編輯、轉靜態網頁、git add 以及 git commit, 都可以在不連網的情況下進行.</p>
<p>另外, 由於可攜程式環境已經事先安裝能夠執行網頁編輯所需的 Python 模組, 因此使用者只要將個人的作業倉儲 git clone 到 USB 隨身碟、桌上或筆電中的磁碟, 就可以直接啟動後進行網頁改版.</p>
<p>以下兩個影片說明如何利用可攜程式環境在近端電腦維護作業倉儲內容:</p>
<p>Localhost 維護作業倉儲教學影片一:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/P6EQkLQ5nhw?si=qJqCrjDAbHNrC2SA" title="YouTube video player" width="560"></iframe></p>
<p>Localhost 維護作業倉儲教學影片二:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/gZMqQMMXEfc?si=EZSYz-lAQ8pCeGbF" title="YouTube video player" width="560"></iframe></p>
<h2>class_materials</h2>
<p>W6 工作環境:</p>
<ol>
<li>使用 Teams 分享操作畫面 (在 IPv4 環境下有時分享畫面會自動跳開)</li>
<li>使用近端可攜程式環境維護 cp2024, 由於先前可能在其他地方加入新版本, 因此維護前先 git pull</li>
<li>目前 cp2024 使用 cmsimde 子模組, 學員的 mdecp2024 下作業倉儲則直接將 cmsimde 作為目錄 (差別?)</li>
<li>目前進度為 print() 與 for 迴圈的應用, 除了基本格式化字串列印, 相同程式邏輯, 可以將 3D 方塊放入機電模擬環境</li>
</ol>
<hr/>
<p>如何登入 Github 後, 顯示出帳號:</p>
<p>how to show account after login to github?</p>
<p>After logging into GitHub, you can view your account details and repositories by following these steps:</p>
<p style="padding-left: 30px;">1. Log In: Go to [GitHub's website](https://github.com) and log in with your credentials.</p>
<p style="padding-left: 30px;">2. Profile Icon: Click on your profile icon in the upper right corner of the page.</p>
<p style="padding-left: 30px;">3. Your Profile: Select "Your profile" from the dropdown menu. This will take you to your profile page, where you can see your repositories, contributions, and other account details.</p>
<p style="padding-left: 30px;">4. Repositories: To view your repositories, click on the "Repositories" tab on your profile page. This will list all the repositories you own and contribute to.</p>
<p style="padding-left: 30px;">5. Settings: If you want to manage account settings, click on "Settings" in the dropdown under your profile icon. Here, you can update your profile information, manage notifications, and more.</p>
<hr/>
<p>1b w1</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/n95FYV0uUg0?si=S_s-Jt0N-pVUtD0S" title="YouTube video player" width="560"></iframe></p>
<p>作業 template: <a href="https://mde.tw/cp2024_hw">https://mde.tw/cp2024_hw</a> </p>
<p>必備:</p>
<p style="padding-left: 30px;">耳機</p>
<p style="padding-left: 30px;">usb 隨身碟 (3.0 以上, 32 gb 以上)</p>
<p>使用者必須參考 <a href="https://mde.tw/cp2024/content/Office365.html">https://mde.tw/cp2024/content/Office365.html</a> 完成:</p>
<p style="padding-left: 30px;">登入 MS Teams 後透過<span>團隊代碼: </span><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">fqpabi8 進入上課畫面</span></p>
<p style="padding-left: 30px;"><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">設法利用學號或帶有學號的字串, 作為<a href="https://github.com/join">申請 Github</a> 的帳號.</span></p>
<p><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">下週將透過 <a href="https://classroom.github.com/">Github Classroom</a> 派送作業倉儲, 使用者必須完成 Github 帳號中的兩段式認證, 若希望使用手錶認證, 可以使用 <a href="https://authy.com/">Authy app</a>.</span></p>
<hr/>
<p>1a w1</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/U8wbLiC7ynI?si=rQhm6PvwhunJNh78" title="YouTube video player" width="560"></iframe></p>
<p>以下影片說明與 TCP/IP 有關的基本用法:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/cOU_MvCb__s?si=bjJunQ4KfguPbL2r" title="YouTube video player" width="560"></iframe></p>
<p>以下影片為 mdecad2024 org 有關的 Codespaces 維護作業網站的說明:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/zRcEB9ac5hk?si=61x7D25PAItl88ag" title="YouTube video player" width="560"></iframe></p>
<p>以下則為 mdecad2024 org 有關的可攜程式維護作業網站的說明：</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/P6EQkLQ5nhw?si=us89Mwkqb1UhCWGC" title="YouTube video player" width="560"></iframe></p>
<h3>Seat</h3>
<p>1a <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/e51dbbc23766cfcce98198d1ef4343e90ba62a4e/cp2024_1a_group1_brython.py">座位表1</a>, <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/e51dbbc23766cfcce98198d1ef4343e90ba62a4e/cp2024_1a_group2_brython.py">分組座位表</a></p>
<p>1b <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/4ed15bcc8ec61a971558f00ee95b6d686739b4ba/cp2024_1b_group1_brython.py">座位表1</a>, <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/4ed15bcc8ec61a971558f00ee95b6d686739b4ba/cp2024_1b_group2_brython.py">分組座位表</a></p>
<hr/>
<p>計算機程式 1a 座位表:</p>
<p><img alt="" height="296" src="/images/cp2024_1a_seat_table.png" width="800"/></p>
<p>計算機程式 1b 座位表:</p>
<p><img alt="" height="286" src="/images/cp2024_1b_seat_table.png" width="800"/></p>
<p>上述程式透過與 claude.ai 進行以下對話後產生：</p>
<p>問題: <br/><br/>https://mde.tw/2024/1a.txt 為一行學員的學號資料, 請用 Brython open().read() 讀取後, 利用 Canvas 在 id 為 brython_div 的超文件位置上, 採由上而下, 由右而左的次序, 用每一個學員除畫出學號外, 還加上外方框線, 且每一列共列出 9 位學員, 畫完後,以print() 印出 "done"<br/><br/>問: 怎麼只列出一位學員? (因為 AI 沒有用跳行隔開學員學號, 而是用 "," 隔開資料)<br/><br/>說明: 因為 AI 沒能正確解讀資料, 因此提供資料格式供其參考:<br/><br/>問: <br/><br/>40831154<br/>40932134<br/>41023249<br/>41031136<br/>41036112 這是前面五行資料, 請修改程式<br/><br/>說明: 接下來 AI 已經能夠正確解讀資料, 但因為提供錯誤的 html id 字串因此產生下列錯誤,<br/><br/>File "&lt;string&gt;", line 8, in draw_students<br/>KeyError: brython_div<br/><br/>問: id 為 brython_div1, x 方向的框寬可以小一點, 否則最左邊顯示不出來<br/><br/>說明: 這時 AI 已經正確完成任務 (也就是修正各學員外框寬度後, 存為 group1), 但因所選的外框太寬, 因此最左邊的學號沒有完全顯示出來, 要求針對這個問題進行處理<br/><br/>問: 可不可以從最右邊開始, 第一列前三個與第二列前三個學員為同一組, 其框內背景請塗上同一個淡顏色辨識, 若至最後一列, 並沒有前三與後三作為同一組, 請就剩下的組員若少於 6 名則設為同一組, 若大於 6 則儘量平均方為兩組.<br/><br/>問: 是原則上同一列三位與下一列對齊的三位為同一組<br/><br/>問: 每一列不是有 9 位學員, 第二列也是有 9 位學員, 第一列的前三個學員與第二列的前三位為同一組, 接下來則是第一列的第 4, 5,6 位學員與第二列的第 4,5,6 位學員則也是同一組, 然後剩下的學員依照這個次序分組, 同一組的塗上相同的背景顏色. 最後因為可能剩下一個列的組員, 因此沒有辦法與下一列的組員進行分組, 因此只能就同一列每六位學員一組, 但若只剩下假設 9 位, 則一組 5 位同學,另一組 4 位, 表示一組至少要有 4 位學員的意思.<br/><br/>問: 原先的學員位置弄亂了, 目前第一列至第六列,只有從右邊算來前 6 位學員進行分組塗色, 各列 7,8,9 並沒有進行分組塗色<br/><br/>說明: 結果 AI 完成 group2 Brython 程式的編寫</p>
<p>以下為 group1 Brython 程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從 Brython 的瀏覽器模組中導入所需的功能
from browser import document, ajax, html

# 定義一個名為 `draw_students` 的函數，用於處理數據並進行繪製
def draw_students(evt):
    # 從事件物件中獲取文字資料
    data = evt.text
    # 根據換行符將數據分割成學生名稱的列表
    students = data.strip().split('\n')  # 以換行符分割
    
    # 檢查是否存在 ID 為 'brython_div1' 的 div，如果不存在則創建
    if 'brython_div1' not in document:
        # 創建一個新的 DIV 元素，並設置其 ID
        div = html.DIV(id='brython_div1')
        # 將新創建的 DIV 元素添加到文檔中
        document &lt;= div
    
    # 創建一個畫布元素，並設置其寬度和高度
    canvas = html.CANVAS(width=900, height=600)
    # 將畫布元素添加到 ID 為 'brython_div1' 的 DIV 中
    document['brython_div1'] &lt;= canvas
    # 獲取畫布的 2D 渲染上下文
    ctx = canvas.getContext('2d')
    
    # 設置初始繪製位置
    x, y = 890, 20  # 稍微調整起始 x 位置
    col_count = 0  # 計數器，用於跟踪當前列數
    box_width = 80  # 設置每個學生姓名框的寬度
    
    # 利用迴圈取出每個學生姓名
    for student in students:
        student = student.strip()  # 去除多餘的空白字符
        if not student:  # 如果學生姓名為空，則跳過
            continue
        
        # 繪製學生姓名框的邊框
        ctx.strokeRect(x-box_width, y-15, box_width, 30)
        
        # 設置繪製文字的字體大小
        ctx.font = '14px Arial'  # 稍微減小字體大小
        # 在指定位置繪製學生姓名
        ctx.fillText(student, x-box_width+5, y+5)
        
        # 更新繪製位置，準備繪製下一個框
        x -= box_width + 10  # 框之間的間距設為 10
        col_count += 1  # 更新列計數器
        
        # 因為每一列有 9 台電腦
        # 如果列計數器達到 9，則換行
        if col_count == 9:
            x = 890  # 重置 x 位置到最右側
            y += 40  # 增加 y 位置，移動到下一行
            col_count = 0  # 重置列計數器
    
    # 打印繪製的學生總數
    print(f"Total students drawn: {len(students)}")
    print("done")  # 打印“完成”信息

# 定義一個名為 `load_data` 的函數，用於從指定 URL 加載數據
def load_data(url):
    # 創建一個新的 AJAX 請求對象
    req = ajax.ajax()
    # 將 `draw_students` 函數綁定到 AJAX 請求的完成事件
    # 表示隨後 AJAX 提出 request 完成之後
    # 要求執行 draw_students 函式
    req.bind('complete', draw_students)
    # 打開 AJAX 請求，指定請求類型為 GET，請求的 URL 和是否採非同步方式進行 request (True 表示採非同步)
    req.open('GET', url, True)
    # 發送 AJAX 請求
    req.send()

# 調用 `load_data` 函數，從指定 URL 加載學生數據
load_data('https://mde.tw/2024/1b.txt')
</pre>
<p>以下為 group2 Brython 程式碼:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, ajax, html  # 從 Brython 的 browser 模組中導入 document（操作 HTML 文檔）、ajax（發送非同步請求）和 html（創建 HTML 元素）功能
import random  # 導入 Python 的 random 模組，用於生成隨機數字

def generate_pastel_color():
    r = random.randint(200, 255)  # 生成一個介於 200 到 255 之間的隨機紅色通道值
    g = random.randint(200, 255)  # 生成一個介於 200 到 255 之間的隨機綠色通道值
    b = random.randint(200, 255)  # 生成一個介於 200 到 255 之間的隨機藍色通道值
    return f'rgb({r},{g},{b})'  # 返回生成的柔和顏色的 RGB 字符串表示

def draw_students(evt):
    data = evt.text  # 從 AJAX 請求事件對象中獲取伺服器返回的文本數據
    students = data.strip().split('\n')  # 去除首尾空白並根據換行符分割成學生名單列表
    
    if 'brython_div1' not in document:  # 檢查文檔中是否已存在 ID 為 'brython_div1' 的 DIV 元素
        div = html.DIV(id='brython_div1')  # 創建一個新的 DIV 元素，ID 設置為 'brython_div1'
        document &lt;= div  # 將創建的 DIV 元素添加到文檔中
    
    canvas = html.CANVAS(width=900, height=600)  # 創建一個寬 900 像素、高 600 像素的畫布元素
    document['brython_div1'] &lt;= canvas  # 將畫布添加到 ID 為 'brython_div1' 的 DIV 中
    ctx = canvas.getContext('2d')  # 獲取畫布的 2D 渲染上下文，用於在畫布上進行繪製操作
    
    x, y = 890, 20  # 初始化起始繪製位置的 x 和 y 坐標
    box_width = 80  # 設置每個學生姓名框的寬度為 80 像素
    students_per_row = 9  # 每行顯示 9 名學生
    group_size = 3  # 每組顏色的數量為 3
    
    def draw_student(student, x, y, color=None):
        ctx.strokeRect(x-box_width, y-15, box_width, 30)  # 繪製學生姓名框的邊框
        if color:  # 如果提供了顏色
            ctx.fillStyle = color  # 設置填充顏色
            ctx.fillRect(x-box_width+1, y-14, box_width-2, 28)  # 填充姓名框背景顏色
        ctx.fillStyle = 'black'  # 設置文字顏色為黑色
        ctx.font = '14px Arial'  # 設置文字字體和大小
        ctx.fillText(student, x-box_width+5, y+5)  # 在指定位置繪製學生姓名
    
    def draw_row(row_students, y, colors):
        nonlocal x  # 宣告 x 為外部作用域中的變數，以便在內部函數中修改它
        for i, student in enumerate(row_students):  # 用迴圈取出當前行的學生名單
            color = colors[i // group_size]  # 根據索引分配顏色
            draw_student(student, x, y, color)  # 繪製學生姓名框和姓名
            x -= box_width + 10  # 更新 x 坐標以便繪製下一個學生的姓名框
        x = 890  # 繪製完一行後，重置 x 坐標以便為下一行的繪製做好準備
    
    row_pairs = []  # 初始化一個空列表，用於儲存每兩行學生的配對
    while len(students) &gt;= students_per_row * 2:  # 當學生數量足夠形成至少兩行時
        row_pairs.append((students[:students_per_row], students[students_per_row:students_per_row*2]))  # 添加兩行學生到配對列表
        students = students[students_per_row*2:]  # 更新學生名單，去掉已處理的部分
    
    for row1, row2 in row_pairs:  # 遍歷每一對學生行
        colors = [generate_pastel_color() for _ in range(3)]  # 為每對行生成三種隨機的柔和顏色
        draw_row(row1, y, colors)  # 繪製第一行學生的姓名框
        y += 40  # 更新 y 坐標，為下一行的繪製留出空間
        draw_row(row2, y, colors)  # 繪製第二行學生的姓名框
        y += 40  # 更新 y 坐標，為下一對行留出空間
    
    if students:  # 處理剩餘的學生
        remaining = len(students)  # 獲取剩餘學生的數量
        if remaining &lt;= students_per_row:  # 如果剩餘學生不足一行
            groups = (remaining + 3) // 4  # 確保至少有 4 人一組
            colors = [generate_pastel_color() for _ in range(groups)]  # 生成所需數量的顏色
            draw_row(students, y, colors * 3)  # 繪製剩餘學生的姓名框，並確保顏色數量足夠
        else:  # 剩餘的學生足夠兩行但不足兩個完整行
            colors = [generate_pastel_color() for _ in range(3)]  # 生成三種顏色
            row1 = students[:students_per_row]  # 分配到第一行
            row2 = students[students_per_row:]  # 分配到第二行
            draw_row(row1, y, colors)  # 繪製第一行
            y += 40  # 更新 y 坐標
            draw_row(row2, y, colors)  # 繪製第二行
    
    print(f"Total students drawn: {len(data.strip().split('\n'))}")  # 輸出繪製的學生總數
    print("done")  # 輸出完成訊息

def load_data(url):
    req = ajax.ajax()  # 創建一個新的 AJAX 請求對象
    req.bind('complete', draw_students)  # 當請求完成時，綁定 draw_students 函數進行處理
    req.open('GET', url, True)  # 設置請求方法為 GET，並指定 URL 和異步標誌
    req.send()  # 發送請求

load_data('https://mde.tw/2024/1a.txt')  # 加載指定 URL 的數據
</pre>
<p>group1 Brython 假如不使用 AJAX, 直接利用 open().read() 讀取網站資料:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從 Brython 的瀏覽器模組中導入所需的功能
from browser import document, html

url = 'https://mde.tw/2024/1b.txt'
data = open(url).read()

# 定義一個名為 `draw_students` 的函數，用於處理數據並進行繪製
def draw_students(data):
    # 根據換行符將數據分割成學生名稱的列表
    students = data.strip().split('\n')  # 以換行符分割
     
    # 檢查是否存在 ID 為 'brython_div1' 的 div，如果不存在則創建
    if 'brython_div1' not in document:
        # 創建一個新的 DIV 元素，並設置其 ID
        div = html.DIV(id='brython_div1')
        # 將新創建的 DIV 元素添加到文檔中
        document &lt;= div
     
    # 創建一個畫布元素，並設置其寬度和高度
    canvas = html.CANVAS(width=900, height=600)
    # 將畫布元素添加到 ID 為 'brython_div1' 的 DIV 中
    document['brython_div1'] &lt;= canvas
    # 獲取畫布的 2D 渲染上下文
    ctx = canvas.getContext('2d')
     
    # 設置初始繪製位置
    x, y = 890, 20  # 稍微調整起始 x 位置
    col_count = 0  # 計數器，用於跟踪當前列數
    box_width = 80  # 設置每個學生姓名框的寬度
     
    # 利用迴圈取出每個學生姓名
    for student in students:
        student = student.strip()  # 去除多餘的空白字符
        if not student:  # 如果學生姓名為空，則跳過
            continue
         
        # 繪製學生姓名框的邊框
        ctx.strokeRect(x-box_width, y-15, box_width, 30)
         
        # 設置繪製文字的字體大小
        ctx.font = '14px Arial'  # 稍微減小字體大小
        # 在指定位置繪製學生姓名
        ctx.fillText(student, x-box_width+5, y+5)
         
        # 更新繪製位置，準備繪製下一個框
        x -= box_width + 10  # 框之間的間距設為 10
        col_count += 1  # 更新列計數器
         
        # 因為每一列有 9 台電腦
        # 如果列計數器達到 9，則換行
        if col_count == 9:
            x = 890  # 重置 x 位置到最右側
            y += 40  # 增加 y 位置，移動到下一行
            col_count = 0  # 重置列計數器
     
    # 打印繪製的學生總數
    print(f"Total students drawn: {len(students)}")
    print("done")  # 打印“完成”信息
 
draw_students(data)</pre>
<p></p>
<h3>cmsimde</h3>
<p><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> 是一套利用 Python + Flask 編寫的網際內容管理系統, 將網頁編輯程式與靜態網站放在同一個倉儲中.</p>
<p>Flask 啟動 https 連線可以採 adhoc 與使用 key.pem, cert.pem 等兩種方式, 其中採 key.pem, cert.pem 的執行無需每次連線都生成數位簽章, 因此速度較快.</p>
<p>cert.pem 與 key.pem 可以利用可攜程式中的 openssl.exe 建立:</p>
<p>openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</p>
<p>放入倉儲根目錄, 並修改 cmsimde 目錄中的 wsgi.py:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/python
 
"""Flask startup script
"""
 
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__)))
# import flaskapp at the same directory
import flaskapp
 
# get uwsgi, ip and port variable values of flaskapp.py
uwsgi = flaskapp.uwsgi
ip = flaskapp.ip
port = flaskapp.dynamic_port
 
if uwsgi:
    # run on remote site
    application = flaskapp.app
else:
    # on localhost, on Linux or Mac need to use python3 wsgi.py to execute
    #flaskapp.app.run(host=ip, port=port, debug=True, ssl_context="adhoc")
    flaskapp.app.run(host=ip, port=port, debug=True, ssl_context=('cert.pem', 'key.pem'))</pre>
<p>此外, 為了加快 USB 中編輯動態網站與生成靜態網站的速度, 可以每次啟動電腦後下載 python_2025_lite.7z 後解開至 C:\, 使用 batch file 執行如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
 
REM 下載 python_2025_lite.7z
 
curl --user kmolab:kmolab --output C:\Users\%USERNAME%\Downloads\python_2025_lite.7z "http://229.cycu.org/python_2025_lite.7z"
 
REM 解開壓縮檔案至 C:\
 
"C:\Program Files\7-Zip\7z" x C:\Users\%USERNAME%\Downloads\python_2025_lite.7z -oC:\ -y</pre>
<p>並僅將 SSH 認證檔案、額外安裝的 Python 模組與 Github 倉儲放在 USB 隨身碟, 其餘執行檔案則使用 C:\ 固態硬碟中下載或既有的檔案, 以加快執行速度, 其對應的啟動批次檔案 start_ipv6_hybrid.bat 如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"
 
%Disk%:
 
REM 請先將 python_2025_lite 下載到 C:\
REM 除了個人作業倉儲與  ssh key 之外, 其他執行都使用 C:\ 中的檔案
set Local=C:\python_2025_lite\data
REM for cadlab
REM set NX_location="C:\Program Files\Siemens\NX2312"
set NX_location=E:\NX2312_CAD
 
REM python 執行將使用 C:\, 但是額外的 Python 模組將存至隨身碟
REM pip install &lt;package&gt; --target  Y:\extra_python_modules, 但必須將此額外模組路徑納入 PYTHONPATH
 
set HomePath=%Disk%:\home_ipv6
set HomeDrive=%Disk%:\home_ipv6
set Home=%Disk%:\home_ipv6
set USERPROFILE=%Disk%:\home_ipv6
 
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
 
set PYTHONPATH=%Local%\Python310\DLLs;%Local%\Python310\Lib;%Local%\Python310\Lib\site-packages;%NX_location%\NXBIN\python;%Disk%:\extra_python_modules;
set PYTHONHOME=%Local%\Python310
 
REM for putty
set GIT_SSH=%Local%\PuTTY\plink.exe
 
REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Local%\Python310;%Local%\Python310\Scripts;
REM 設定跟Git 有關的命令搜尋路徑
set path_git=%Local%\portablegit\bin;

REM proxy can not use with fossil scm
REM set HTTP_PROXY=http://[2001:288:6004:xx::42]:3128
REM set HTTPS_PROXY=http://[2001:288:6004:xx::42]:3128
 
REM for PyRep
set VREP_PATH=%Local%\CoppeliaSim
 
REM for execute scite directly
set path_scite=%Local%\wscite\;
 
REM for simExtZMQ
set path_xsltproc=%Local%\xsltproc;
 
REM for OpenSSL
Set OPENSSL_CONF=%Local%\OpenSSL-Win64\SSL\openssl.cnf
set path_openssl=%Local%\OpenSSL-Win64\bin;
 
path=%Local%;%path_python%;%path_git%;%path_putty%;%path_scite%;%path_openssl%;%path%;
 
REM for NX2312, must after path setup 
set SPLM_LICENSE_SERVER=29000@192.168.56.3
set UGII_LANG=english
set UGS_LICENSE_BUNDLE=ACD11,ACD10
set UGII_BASE_DIR=%NX_location%
set UGII_TMP_DIR=%Local%\tmp
set UGII_LIB_PATH=%NX_location%\NXBIN\python
set ugii=%NX_location%\ugii;%NX_location%\nxbin;
path = %ugii%;%path%
REM Xcopy %Local%\home_ipv6\AppData\Local\Siemens\NX2312 C:\users\%USERNAME%\AppData\Local\Siemens\NX2312 /E /H /C /I /Y
 
REM start ugraf -nx
 
REM python %Local%\tmp\nx_ex\new_part.py
 
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
 
start /MIN %Local%\wscite\SciTE.exe
start /MIN %Local%\wscite\SciTE.exe
 
 
Exit</pre>
<p></p>
<h3>Vocabulary</h3>
<p>這裡將要利用 Python 程式, 從電子書: <a href="/downloads/learn_python_with_jupyter.pdf">Learn Python with Jupyter</a> (5.6MB), 擷取出英文單字, 並建立查詢中英文字典的網頁.</p>
<p>所使用的 Python 模組為 <a href="https://github.com/deanmalmgren/textract">textract</a> 結合 <a href="https://github.com/oschwartz10612/poppler-windows/releases">poppler</a> 中的 pdftotext.exe 工具, 先利用 <a href="/downloads/extract_text_from_pdf.txt">extract_text_from_pdf.txt</a> 將電子書的內容取出後, 再利用 <a href="/downloads/check_vocabulary_from_cdit_net.txt">check_vocabulary_from_cdit_net.txt</a> 建立單字查詢超文件: <a href="/downloads/words_learn_python_with_jupyter.html">words_learn_python_with_jupyter.html</a></p>
<p>由於可攜程式套件 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> 中的 pip 版本高於 24.1, 導致無法正常安裝 <a href="https://github.com/deanmalmgren/textract">textract</a> 模組, 因此利用:  </p>
<p>python get-pip.py pip==21.1.2</p>
<p>將 pip 版本退至 21.1.2 後, 利用 pip install textract, 然後下載 <a href="https://github.com/oschwartz10612/poppler-windows/releases">poppler</a> 工具, 讓 pdftotext.exe 可以在可攜程式環境的 path 中執行.</p>
<p></p>
<h3>Computer</h3>
<p>本頁將提供本系與電腦軟硬體有關的資訊, 其中包括<span style="background-color: #ccffcc;">個人電腦</span>、<span style="background-color: #ccffcc;">筆電</span>、<span style="background-color: #ccffcc;">操作系統</span>、<span style="background-color: #ccffcc;">軟體套件</span>與<span style="background-color: #ccffcc;">網路連線</span>相關的內容.</p>
<h4>基本概念:</h4>
<p style="padding-left: 30px;">要對個人使用的電腦軟硬體與網路連線<span style="background-color: #ffff00;">有清楚的認識</span>, 碰到問題時才能<span style="background-color: #ffff00;">迅速排除.</span></p>
<p style="padding-left: 30px;">學習使用電腦軟硬體, 要從<span style="background-color: #ffff00;">最基本的安裝</span>作為起點, 並不斷學習如何<span style="background-color: #ffff00;">延伸既有套件的功能</span>, 且嘗試動手<span style="background-color: #ffff00;">建立或配置合用的電腦軟硬體.</span></p>
<h4>英文單字:</h4>
<p>認識這 <a href="/downloads/5000_words.txt">5000_words.txt</a> 英文單字, 將有助於碰到與電腦軟硬體相關的英文資訊時的理解與應用.</p>
<p>2016 年出版的 <a href="https://link.springer.com/book/10.1007/978-981-10-3277-6"> Programming with Python </a> <span> </span> 書中收集 2244 個英文 <a href="http://wcm.cycu.org:88/github/cp2023/downloads/words_2016_programming_with_python.txt"> 單字出現次數 </a> , 以及各單字的 <a href="http://wcm.cycu.org:88/github/cp2023/downloads/words_2016_programming_with_python.html"> 查詢頁面</a>.</p>
<h4>操作系統:</h4>
<p style="padding-left: 30px;">使用 VPN 或位於校網, 下載 <a href="https://software.nfu.edu.tw/Windows/tw/Win_Pro_Ent_Edu_N_10_1809_64bit_Chinese_Traditional.iso">Windows 1809 ISO</a>、<a href="https://software.nfu.edu.tw/Windows/tw/Win10_1909_64BIT_CH.ISO">Win10_1909</a>、<a href="https://software.nfu.edu.tw/Windows/tw/Win10_21H2.9_64BIT_CH.ISO">Win10_21H2.9</a>、<a href="https://software.nfu.edu.tw/Windows/tw/Win_10_22H2.4_64BIT_Ch.ISO">Win_10_22H2.4</a> 或 <a href="https://software.nfu.edu.tw/Windows/tw/Win_11_22H2.6_64BIT_Ch.ISO">Win_11_22H2.6</a>, 然後利用 <a href="https://www.virtualbox.org/wiki/Downloads">Virtualbox</a> 以虛擬主機安裝 Windows 64 位元操作系統. 安裝後每半年必須在校網或使用 VPN, 透過 <a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">Windows KMS</a> 以管理者身分進行認證. <a href="https://software.nfu.edu.tw/files/%E8%99%8E%E5%B0%BE%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%B8Windows_KMS%E5%95%9F%E5%8B%95%E6%95%99%E5%AD%B8.pdf">Windows 操作系統安裝啟動教學</a>.</p>
<p>說明如何安裝與配置虛擬主機的影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/zwrxuXz39PM?si=nyaWvLHYNRKDJpDa" title="YouTube video player" width="560"></iframe></p>
<p>其他教育版軟體下載: <a href="https://software.nfu.edu.tw/">https://software.nfu.edu.tw/</a> (<a href="https://software.nfu.edu.tw/ms-windows.php">Windows 操作系統下載頁面</a>)</p>
<p>安裝完成後, 可以直接利用 <a href="http://229.cycu.org/win10_2024.vdi">win10_2024.vdi</a> 建立一個虛擬的 Windows 10 操作系統環境. 或者下載 <a href="http://229.cycu.org/win10_2024_vdi.7z">win10_2024_vdi.7z</a>, 使用已經配置 Firefox, 7zip, 以及 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a><span> 的虛擬主機檔案.</span></p>
<p>接下來就可以利用虛擬主機自行配置計算機程式所需的網路與 Python 可攜套件.</p>
<p>建立使用者:</p>
<p style="padding-left: 30px;">利用指令建立 Windows 10 下的使用者帳號:</p>
<p style="padding-left: 30px;">先利用管理者身分啟動一個 cmd (命令提示字元視窗)</p>
<p style="padding-left: 30px;">利用 net user 帳號名稱 密碼 /add 指令, 建立使用者登入名稱為: 帳號名稱, 其登入密碼為: 密碼</p>
<p>修改 <a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81">uuid</a>:</p>
<p style="padding-left: 30px;">利用 <span>VBoxManage.exe 修改 win10_2024.vdi 的 uuid, 因為在同一套 Virtualbox 上的各個虛擬主機檔案, 必須要有不同的 uuid.</span></p>
<p style="padding-left: 30px;">D:\VirtualBox\VBoxManage internalcommands sethduuid "c:\tmp\win10_2024.vdi"</p>
<p>下載安裝 SolidWorks 2023 教育版:</p>
<p style="padding-left: 30px;">請參考電腦輔助設計實習課程中的 <a href="https://mde.tw/cad2024/content/SolidWorks.html">SolidWorks 頁面</a>說明.</p>
<p>虛擬主機上的網路卡設定:</p>
<p style="padding-left: 30px;">希望虛擬主機可以上網, 但無需做為伺服器 - <span style="background-color: #ffff00;">採 NAT 設定</span>, 可以利用宿主 (實體 Windows 或 Linux 操作系統) 的網路連外, 但是外網電腦無法直接對此虛擬主機連線.</p>
<p style="padding-left: 30px;">希望虛擬主機可以上網, 並且充當伺服器 - <span style="background-color: #ffff00;">採 Bridge Adaptor 設定</span>, 虛擬主機的網路卡位階與宿主的網路卡連線相當, 若宿主有兩片實體網路卡, 則虛擬主機可以將 Bridge Adaptor 轉接到第宿主的第二片實體網路卡, 可以取得與宿主相同的網路連線頻寬.</p>
<p style="padding-left: 30px;">希望虛擬主機僅能與宿主網路連線, 不會受到外部網路干擾 - <span style="background-color: #ffff00;">採 Host-Only Adaptor 設定</span>, 虛擬主機僅能與宿主透過內部的網路設定連線, 虛擬主機無法對外連線.</p>
<hr/>
<p>由於 <a href="/get_page/Windows/Virtualbox">Virtualbox</a> 虛擬機屬於 Type 2 Hypervisor, 因此與原生機的效能差別較大, 有同學建議使用 <a href="https://proxmox.com/en/downloads/proxmox-virtual-environment">Proxmox Virtual Environment</a> (PVE) , 但 PVE 屬於 Type 1 Hypervisor, 是一套分別整合 KVM hypervisor、Linux Container (LXC)、軟體定義儲存與網路功能的虛擬機器管理平台, 本身就是一套基於 <a href="https://www.debian.org/">Debian</a> 的完整操作系統, 因此必須要下載 .iso 檔案放入 USB, 然後對實體電腦開機後使用. 以下將介紹其使用方法:</p>
<p><a href="https://enterprise.proxmox.com/iso/proxmox-ve_8.2-2.iso">proxmox-ve_8.2-2.iso</a> 容量為 1.39GB, <a href="https://proxmox.com/en/proxmox-virtual-environment/overview">使用說明</a>.</p>
<p>上述採用 <a href="/get_page/Windows/Virtualbox">Virtualbox</a> 所建立的 .vdi 虛擬機器檔案, 可以經過轉換後用來建立 Proxmox VE 的虛擬機器, 其步驟如下:</p>
<ol>
<li>將 .vdi 檔案上傳到 PVE 主機</li>
<li>使用 qemu-img 轉換成 PVE 支援的格式: qemu-img convert -f vdi -O qcow2 source.vdi destination.qcow2</li>
<li>在 PVE 中創建新的虛擬機</li>
<li>選擇使用轉換後的磁碟映像檔</li>
</ol>
<p>由於利用 PVE 建立 Windows 10 或 11 虛擬機器, 需要對電腦輔助設計室中的電腦設定為可以接受 USB 開機, 且所建立的 Windows 操作系統, 將失去目前 Windows 11 中所安裝的套件使用, 因此比較不適合目前計算機程式課程的使用.</p>
<hr/>
<h4>Ubuntu</h4>
<p><a href="https://s104.cycu.org/~scrum1/ubuntu24041_vdi_mde.7z">ubuntu24041_vdi_mde.7z</a></p>
<hr/>
<h4>網路連線</h4>
<p></p>
<h3>Environment</h3>
<p>說明如何利用 ShareX 與 Zoomit 拍攝電腦操作流程影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/4K5yoD4z6OM?si=b9S3w4bbqpE6kk0e" title="YouTube video player" width="560"></iframe></p>
<p>示範如何加入 Brython 頁面, 並用來編寫 print 與 for 迴圈相關程式:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/hBeal82FM9E?si=JQILDraEhXTvSoPX" title="YouTube video player" width="560"></iframe></p>
<p>說明如何使用可攜程式維護作業網站:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/81Wg14SX4KI?si=o6ZypXj7XtLWPKjE" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/3e0fb6ecfa560b1245120b1135ef69c6e6e59ae1/w7_1a_check_brython.py">check_1a_w7_html</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/ea83ce68baba381d7ee002103c5c8b3945fe9333/w7_check_html_brython.py">check_1b_w7_html</a></p>
<p>利用以下影片了解 Git:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/4lxvVj7wlZw?si=ZnpHK36xXFwBxjb2" title="YouTube video player" width="560"></iframe></p>
<hr/>
<p>執行 Python 的環境:</p>
<ol>
<li>Brython 環境: <a href="https://mde.tw/cp2024/content/Brython.html">https://mde.tw/cp2024/content/Brython.html</a> </li>
<li>可攜環境的 SciTE 編輯器</li>
<li>可攜環境的命令提示字元視窗</li>
<li>Jupyter lab</li>
<li>Codespaces 環境中的 Visual Studio Code</li>
</ol>
<hr/>
<p>Brython 頁面超文件: <a href="/downloads/brython_html.txt">brython_html.txt</a></p>
<p><img alt="" height="274" src="/images/brython_functions.png" width="400"/></p>
<p><a href="/downloads/brython_functions.dia">brython_functions.dia</a></p>
<p>Strings, input(), and print()</p>
<p>首先必須瞭解  Python 變數命名法則:</p>
<p style="padding-left: 30px;">必須以英文字母或 _ 作為開頭, 隨後可以接上任何數字、英文字母或 _</p>
<p style="padding-left: 30px;">但變數名稱區分英文字母的大小寫, 變數也可以使用中文命名, 但一般並不建議使用英文以外的多 byte 語系命名.</p>
<p>String 為字串, 可以用單引號、雙引號或三引號隔開. 例如:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">"this is a string's " 使用雙引號將字串區隔

'this is a string' 使用單引號將字串區隔

當字串超過一行時, 可以使用三引號:

'''

這裡面是用來說明程式目的或紀錄

相關事項的多行文字

'''</pre>
<p>print 與 for 重複迴圈</p>
<p>help(print)</p>
<p>help(range)</p>
<p>與 ChatGPT 對話:</p>
<p style="padding-left: 30px;">可以解釋一下help(range) 傳回來的內容嗎?</p>
<p>將 help(range) 傳回的內容貼給 ChatGPT, 然後問:</p>
<p style="padding-left: 30px;">可以舉例詳細說明以下 help(range) 傳回來的內容嗎? 然後貼上 help 傳回的資料.</p>
<p>詢問 for i in range():</p>
<p style="padding-left: 30px;">如何解釋 Python 中的 for i in range(5):</p>
<p style="padding-left: 30px;">如何解釋 range(5) ?</p>
<p style="padding-left: 30px;">range(5) 是數列嗎?</p>
<p style="padding-left: 30px;">能夠生成從 0 到 4 的整數序列, 所以可以稱 range(5) 為甚麼?</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">請舉 10 個可以協助使用者理解 for range 與 print 等關鍵字的範例</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">請用 Python 的 for 跟 print 印出五行的 * 排列成的三角形金字塔, 也就是 * 在最中間, 第二行為正中央的 *** 然後第三行 *****, 總共五行.</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">請詳細解釋你的解法過程</p>
<p><a href="/downloads/help_print.txt">help_print.txt</a></p>
<p><a href="/downloads/help_range.txt">help_range.txt</a> (<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/f18194c5712971ba9a89123d74378cfa/raw/d3b2374917b6fb25dd9a7f83cbd4f371fd8caa85/help_range.py">在 Brython 環境執行</a>)</p>
<p><a href="/downloads/triangle_star_2.txt">triangle_star_2.txt</a> (<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/f18194c5712971ba9a89123d74378cfa/raw/c44b9f215f131d426d5ec7d8c4f1c3366c08c218/triangle_print_2.py">在 Brython 環境執行</a>)</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a></p>
<hr/>
<p><img alt="" height="418" src="/images/coppeliasim_python.png" width="400"/></p>
<p><a href="/downloads/coppeliasim_python.dia">coppeliasim_python.dia</a></p>
<p>在 AI 以及積極學習的動機下 (查英文單字、練習英打、學會與 AI 互動), 儘快了解 <a href="/downloads/zmq_remote_api_ex.7z">zmq_remote_api_ex.7z</a></p>
<p>利用 Python 將正方體物件排列進入 CoppeliaSim 模擬場景: <a href="/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a></p>
<p>機械設計工程師學習計算機程式的目的之一: 設計與模擬運算, 希望在產品零組件實體製作之前, 可以事先了解或評量設計流程各階段事物的特性, 並提供關鍵設計尺寸進行客製化調控.</p>
<p>CoppeliaSim API constants: <a href="https://manual.coppeliarobotics.com/en/apiConstants.htm">https://manual.coppeliarobotics.com/en/apiConstants.htm</a></p>
<p>在模擬場景中的 cubes 排列:</p>
<p><img caption="false" height="307" src="/images/triangle_cube_on_copsim1.png" width="400"/></p>
<p>在瀏覽器中的 cubes 排列:</p>
<p><img alt="" height="307" src="/images/triangle_cube_on_copsim2.png" width="400"/></p>
<p>操作步驟:</p>
<ol>
<li>下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (可攜程式環境)</li>
<li>下載<span> </span><a href="/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a> (利用 Python 控制模擬場景中的物件)</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, <a href="https://github.com/CoppeliaRobotics">原始碼</a>)</li>
<li>啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器</li>
<li>執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出:</li>
<li>netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050<br/>netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream</li>
<li>利用 SciTE 開啟 put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式</li>
<li>使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景</li>
</ol>
<p><a href="/downloads/allow_23000-23050_in_out.txt">allow_23000-23050_in_out.txt</a> (存為 .bat 並以管理者身分執行)</p>
<p>詢問 ChatGPT, 希望讓 <span>put_cubes_into_scene_1.py 中的所有 cubes 擺放後, 接著能夠全數朝負 Y 方向緩慢移動:</span></p>
<p><span>提問內容: "以下為 CoppeliaSim ZMQ remote API Python 程式, 請在生成 cute 列隊之後, 設法讓所有 cubes 緩緩朝負 Y 的方向移動:" 隨後加上的程式碼</span></p>
<p>接著測試是否可以得到正確的答案?</p>
<hr/>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/18b3cdd1f9bbef6ff913cc88293a8ebb7e028520/1a_w3_site_repo_brython.py">1a site and repo</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/502faba5a396f671622c3ff2b89d741a466752be/1b_w3_site_repo_brython.py">1b site and repo</a></p>
<h3>String</h3>
<p><a href="https://mde.tw/cp2024/downloads/learn_python_with_jupyter.pdf#chapter.1">https://mde.tw/cp2024/downloads/learn_python_with_jupyter.pdf#chapter.1</a></p>
<p>在 Python 中，字串（strings）就是用引號括起來的文本。它們是處理文字數據的基本方式。字串可以用單引號 (')、雙引號 (")，或三重引號 (''' 或 """) 括起來。這些引號的使用方式有各自的特點和用途：<br/>1. 單引號 (')<br/><br/>單引號用於定義簡單的字串，適合沒有包含單引號字符的情境。<br/><br/>python<br/><br/># 定義一個單引號字串<br/>single_quote_string = 'Hello, World!'<br/>print(single_quote_string)<br/><br/>2. 雙引號 (")<br/><br/>雙引號也用於定義字串，它們的主要好處是當字串中包含單引號時，可以避免使用轉義字符。<br/><br/>python<br/><br/># 定義一個雙引號字串<br/>double_quote_string = "Python's syntax is simple."<br/>print(double_quote_string)<br/><br/>3. 三重引號 (''' 或 """)<br/><br/>三重引號用於定義多行字串，也可以用於包含單引號和雙引號的情境。<br/><br/>python<br/><br/># 使用三重單引號定義多行字串<br/>multi_line_string = '''This is a string<br/>that spans multiple lines.<br/>It can also include 'single' and "double" quotes.'''<br/>print(multi_line_string)<br/><br/># 使用三重雙引號定義多行字串<br/>another_multi_line_string = """Here is another example<br/>of a multi-line string.<br/>It also allows for 'single' and "double" quotes."""<br/>print(another_multi_line_string)<br/><br/>常見字串操作<br/><br/>    拼接字串<br/><br/>    使用 + 來拼接多個字串。<br/><br/>    python<br/><br/>greeting = "Hello, " + "World!"<br/>print(greeting)<br/><br/>重複字串<br/><br/>使用 * 來重複字串。<br/><br/>python<br/><br/>echo = "Hello! " * 3<br/>print(echo)<br/><br/>字串長度<br/><br/>使用 len() 函數來獲取字串的長度。<br/><br/>python<br/><br/>length = len("Hello, World!")<br/>print(length)  # 13<br/><br/>字串方法<br/><br/>Python 字串有許多內建的方法，如 upper(), lower(), strip(), replace(), find() 等。<br/><br/>python<br/><br/># 轉換為大寫<br/>upper_case = "hello".upper()<br/>print(upper_case)  # "HELLO"<br/><br/># 移除首尾空白字符<br/>stripped_string = "   text with spaces   ".strip()<br/>print(stripped_string)  # "text with spaces"<br/><br/># 替換字串中的字符<br/>replaced_string = "hello world".replace("world", "Python")<br/>print(replaced_string)  # "hello Python"<br/><br/>格式化字串<br/><br/>使用 f-strings（Python 3.6 及更高版本）或 format() 方法進行格式化。<br/><br/>python<br/><br/>    name = "Alice"<br/>    age = 30<br/>    formatted_string = f"Name: {name}, Age: {age}"<br/>    print(formatted_string)<br/><br/>    # 使用 format() 方法<br/>    formatted_string = "Name: {}, Age: {}".format(name, age)<br/>    print(formatted_string)<br/><br/>結論<br/><br/>字串是 Python 中處理文字的基本單位，無論是單行還是多行，都可以用不同的引號來表示。了解如何操作字串是掌握 Python 的重要基礎。</p>
<h2>Topic 2</h2>
<h4>Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<p></p>
<h2>Topic 3</h2>
<h4>Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p></p>
<h2>Topic 4</h2>
<h4>利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p><a href="/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Exam</h1>
<h4><span>出席 (10%) - 自行舉證評分</span></h4>
<h4>Topic 1: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)</h4>
<p style="padding-left: 30px;">瀏覽器</p>
<p style="padding-left: 30px;">分散式</p>
<p style="padding-left: 30px;">版次管理</p>
<p style="padding-left: 60px;">Local 有三種方式: HTTPS, SSH 與 Github CLI</p>
<p style="padding-left: 60px;"><a href="https://github.com/codespaces">Codespaces</a></p>
<p style="padding-left: 30px;">程式開發(執行)環境 - Python 變數命名原則? <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9d7d4227cc13cdad06544e3960c90a1adfb5c388/python_keywords.py">Keywords</a></p>
<p style="padding-left: 60px;"><span style="background-color: #ffff00;">Brython</span> - <a href="https://mde.tw/cp2024/content/Brython.html">https://mde.tw/cp2024/content/Brython.html</a></p>
<p style="padding-left: 60px;"><span style="background-color: #ffff00;">SciTE</span> - Tools - Go</p>
<p style="padding-left: 60px;"><span style="background-color: #ffff00;">命令提示字元</span> - cd .., dir, mkdir, c:, y:, python ex1.py</p>
<p style="padding-left: 60px;"><span style="background-color: #ffff00;">Jupyter lab</span> - cd notebook, jupyter lab --collaborative, File - Shutdown</p>
<p style="padding-left: 90px;"><a href="/downloads/jupyter_server_config.7z">jupyter_server_config.7z</a></p>
<p style="padding-left: 60px;"><span style="background-color: #ffff00;">Visual Studio Code</span> - <a href="https://link.springer.com/book/10.1007/978-1-4842-7344-9">電子書</a></p>
<h4>Topic 2: Python 的<span style="background-color: #ccffcc;">數列</span>、<span style="background-color: #ccffcc;">判斷式</span>與<span style="background-color: #ccffcc;">重複迴圈</span> (20%)</h4>
<p style="padding-left: 30px;"><a href="https://www.learnpythonwithjupyter.com/">Learn Python with Jupyter</a> </p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a></p>
<p style="padding-left: 30px;">列印圓型區域?</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/1457067b9552e117448b4fdad013bcc8/raw/b3a496bb8b08bbe0e68ed2a0f712bacfda07d00c/w11_hw_2_1_brython.txt">延伸應用一</a></p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/1457067b9552e117448b4fdad013bcc8/raw/b3a496bb8b08bbe0e68ed2a0f712bacfda07d00c/w11_hw_2_2_brython.txt">延伸應用二</a> (物件導向)</p>
<h4>Topic 3: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;"><a href="https://www.learnpythonwithjupyter.com/">Learn Python with Jupyter</a></p>
<h4>Topic 4: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/1457067b9552e117448b4fdad013bcc8/raw/2dd377e7d877bbf38f9cce38d733d51b588d8cc3/spur_gear_width_design_py.txt">正齒輪的齒面寬設計</a> (英制) - <a href="/downloads/gear_design_cp2024.7z">gear_design_cp2024.7z</a></p>
<p style="padding-left: 60px;"><a href="/downloads/spur_gear_width_design.pdf">spur_gear_width_design.pdf</a> (<a href="https://highered.mheducation.com/sites/dl/free/9814595284/1054140/Budynas_Chapter_14.pdf">source</a>)</p>
<p style="padding-left: 60px;"><a href="/downloads/spur_and_helical_gears.pdf">spur_and_helical_gears.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-3-030-70304-2">Practical Guide to Digital Manufacturing</a></p>
<p style="padding-left: 30px;">CoppeliaSim</p>
<p style="padding-left: 60px;"><span></span><a href="/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a></p>
<p style="padding-left: 60px;"><a href="/downloads/allow_23000-23050_in_out.txt">allow_23000-23050_in_out.txt</a> (存為 .bat 並以管理者身分執行)</p>
<p style="padding-left: 30px;">Webots</p>
<p style="padding-left: 60px;"><a href="https://cyberbotics.com/doc/guide/using-python">https://cyberbotics.com/doc/guide/using-python</a></p>
<p style="padding-left: 30px;">RoboDK</p>
<p style="padding-left: 60px;"><a href="https://robodk.com/doc/en/PythonAPI/index.html">https://robodk.com/doc/en/PythonAPI/index.html</a></p>
<h4>Final Report: 期末口頭與書面專題報告 (20%)</h4>
<p style="padding-left: 30px;">Powerpoint vs Reveal</p>
<p style="padding-left: 30px;">Word vs LaTeX</p>
<h3>Exam1</h3>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/a5f43d9c5453aaffcf56ae4621e7555888478d8d/1a_weekly_brython.py&amp;page_title=w10">1a w10</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/2dbc73e836424561e34cf05b7a91eaa0c6e7076c/1b_weekly_brython.py&amp;page_title=w10">1b w10</a></p>
<hr/>
<p>請在個人網頁標題為 "HW 1 Exam" 頁面之後, 加上一個第三階的頁面, 標題為 "w10".</p>
<p>並在 "w10" 頁面中完成下列隨堂考試的要求:</p>
<p>每一項任務都要拍攝過程操作影片, 且<span style="background-color: #ffff00;">片頭要先切換到個人的課程網頁 "About" 頁面, 顯示操作者的學號與個人網頁連結</span>.</p>
<p><span style="background-color: #ccffcc;">題目一</span>: 請利用<a href="https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">程式一</a>的原始碼, 分別在自己網站的 Brython 頁面、SciTE 編輯器、命令提示字元視窗、Jupyter Lab 以及 Codespaces 環境中執行, 所完成的操作影片, 請以"國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 學號" 作為標題, 並在影片說明欄位中敘述此一影片的操作概要與心得, 完成後請將影片上傳至個人 Youtube 帳號中, 並嵌入個人網站中的 "w10" 頁面.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/_R2yDroWksM?si=chhfRc7j_Z5z_9eD" title="YouTube video player" width="560"></iframe></p>
<p><span style="background-color: #ccffcc;">題目二</span>: 請問 Python 程式中有關變數的命名, 除了必須以"_", 以及英文大小寫字母開頭之外, 還有甚麼需要特別注意的地方? 與所謂的"關鍵字"(<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9d7d4227cc13cdad06544e3960c90a1adfb5c388/python_keywords.py">Keywords</a>)有關係嗎? 請實際舉例, 針對 Python 程式命名的規則編寫程式, 並採上一題的五種程式執行方法, 展示正確變數命名與違反變數命名時, 所顯示的錯誤訊息回應. 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目二"標示.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/eSYhRgm44Ro?si=8DqsIrcNZTkUovVJ" title="YouTube video player" width="560"></iframe></p>
<p><span style="background-color: #ccffcc;">題目三</span>: <a href="http://mde.tw/cp2024/content/Problem_set.html">http://mde.tw/cp2024/content/Problem_set.html</a> 中有利用 Python 程式解決物理與微積分的範例流程, 請根據過程中所得到的 Python 程式, 利用題目一中的五種方法執行後, 在影片說明欄位及個人 w10 頁面中說明解題流程與心得, 影片命名及嵌入網頁要求與題目一相同, 但必須使用"題目三"標示.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/M_3N4dGMZR4?si=d69G8RyFtT9mNEYi" title="YouTube video player" width="560"></iframe></p>
<p>上列題目完成後, 請登入課程 Teams 一般頻道中, 將對應資料填入各班的 Exam1 考試回報表中.</p>
<h3>Problem_set</h3>
<p>以下方程式列印採用 <a href="https://www.mathjax.org/#gettingstarted">Mathjax Version 3 格式</a>.</p>
<script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<h4>set1 - Physics</h4>
<p><span style="background-color: #ccffcc;">Use python to solve the problem: A jet touches down at velocity 310 km/h. Find the constant acceleration required to stop the aircraft 1000 m down the runway.</span></p>
<p style="padding-left: 30px;">To solve this problem, we'll use the kinematic equations of motion under constant acceleration. The question asks for the constant acceleration required to stop the jet after a certain distance, which means we are looking for the deceleration.</p>
<p style="padding-left: 30px;">Step 1: Problem Breakdown</p>
<p style="padding-left: 30px;">We are given:<br/>- Initial velocity \( v_0 = 310 \, \text{km/h} \)<br/>- Final velocity \( v = 0 \, \text{m/s} \) (since the jet stops)<br/>- Distance \( d = 1000 \, \text{m} \)</p>
<p style="padding-left: 30px;">We are asked to find the constant acceleration \( a \) that brings the jet to a stop.</p>
<p style="padding-left: 30px;">Step 2: Kinematic Equation</p>
<p style="padding-left: 30px;">The appropriate kinematic equation for this problem, where the object is decelerating (i.e., stopping), is:</p>
<p style="padding-left: 30px;">\[<br/>v^2 = v_0^2 + 2ad<br/>\]</p>
<p style="padding-left: 30px;">Where:<br/>- \( v \) is the final velocity (which is 0 since the jet stops),<br/>- \( v_0 \) is the initial velocity,<br/>- \( a \) is the constant acceleration (which we need to solve for),<br/>- \( d \) is the distance traveled.</p>
<p style="padding-left: 30px;">Step 3: Solving for Acceleration \( a \)</p>
<p style="padding-left: 30px;">Rearranging the equation to solve for \( a \):</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{v^2 - v_0^2}{2d}<br/>\]</p>
<p style="padding-left: 30px;">Since \( v = 0 \), this simplifies to:</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{-v_0^2}{2d}<br/>\]</p>
<p style="padding-left: 30px;">Step 4: Converting Units</p>
<p style="padding-left: 30px;">The velocity \( v_0 = 310 \, \text{km/h} \) needs to be converted to meters per second (m/s) because the distance is in meters and we want the acceleration in meters per second squared (m/s²).</p>
<p style="padding-left: 30px;">\[<br/>v_0 = 310 \, \text{km/h} = \frac{310 \times 1000}{3600} \, \text{m/s} = 86.11 \, \text{m/s}<br/>\]</p>
<p style="padding-left: 30px;">Step 5: Substituting Known Values</p>
<p style="padding-left: 30px;">Now we can substitute the values into the equation:</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{-(86.11)^2}{2 \times 1000}<br/>\]</p>
<p style="padding-left: 30px;">Let's calculate this using Python.</p>
<p style="padding-left: 30px;">Python Code Implementation: <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/d9558707c7e1765c1e6885ddc6919e32265c6d23/problem-set1-1_py.txt">problem-set1-1.py</a></p>
<p style="padding-left: 30px;"></p>
<p style="padding-left: 30px;">Use function to solve this kind of problem. <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9567804babcc2fa9edc32403d76dcf2af4955bcf/problem-set1-2_py.txt">problem-set1-2.py</a></p>
<p style="padding-left: 30px;">Extend to be more general to solve all kind of these problems. <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9567804babcc2fa9edc32403d76dcf2af4955bcf/problem-set1-3_py.txt">problem-set1-3.py</a></p>
<h4>set2- Calculus</h4>
<p><span style="background-color: #ccffcc;">Under ideal conditions a certain bacteria population is known to double every three hours. Suppose that there are initially 100 bacteria. When will the population first reach 50,000 ?</span></p>
<p style="padding-left: 30px;">We are asked to determine when a bacteria population, starting at 100 bacteria, will first reach 50,000, given that the population doubles every 3 hours.</p>
<p style="padding-left: 30px;">Exponential Growth Equation:</p>
<p style="padding-left: 30px;">The population growth can be modeled by the exponential growth formula:</p>
<p style="padding-left: 30px;">\[<br/>P(t) = P_0 \times 2^{\frac{t}{T}}<br/>\]</p>
<p style="padding-left: 30px;">Where:<br/>- \( P(t) \) is the population at time \( t \),<br/>- \( P_0 \) is the initial population,<br/>- \( T \) is the doubling time (in hours),<br/>- \( t \) is the time elapsed (in hours).</p>
<p style="padding-left: 30px;">Given:<br/>- \( P_0 = 100 \) (initial population),<br/>- \( T = 3 \) hours (doubling time),<br/>- \( P(t) = 50,000 \) (target population).</p>
<p style="padding-left: 30px;">Step 1: Plugging in the known values</p>
<p style="padding-left: 30px;">We want to find the time \( t \) when the population reaches 50,000. Substituting the known values into the growth equation:</p>
<p style="padding-left: 30px;">\[<br/>50,000 = 100 \times 2^{\frac{t}{3}}<br/>\]</p>
<p style="padding-left: 30px;">Step 2: Simplifying the equation</p>
<p style="padding-left: 30px;">First, divide both sides by 100 to isolate the exponential term:</p>
<p style="padding-left: 30px;">\[<br/>500 = 2^{\frac{t}{3}}<br/>\]</p>
<p style="padding-left: 30px;">Step 3: Solving for \( t \)</p>
<p style="padding-left: 30px;">To solve for \( t \), take the logarithm (base 2) of both sides of the equation:</p>
<p style="padding-left: 30px;">\[<br/>\log_2(500) = \frac{t}{3}<br/>\]</p>
<p style="padding-left: 30px;">Now, multiply both sides by 3 to solve for \( t \):</p>
<p style="padding-left: 30px;">\[<br/>t = 3 \times \log_2(500)<br/>\]</p>
<p style="padding-left: 30px;">Step 4: Change of Base Formula</p>
<p style="padding-left: 30px;">To compute \( \log_2(500) \) in Python or any other programming language, we can use the change of base formula:</p>
<p style="padding-left: 30px;">\[<br/>\log_2(x) = \frac{\log_{10}(x)}{\log_{10}(2)}<br/>\]</p>
<p style="padding-left: 30px;">Thus, the equation for \( t \) becomes:</p>
<p style="padding-left: 30px;">\[<br/>t = 3 \times \frac{\log_{10}(500)}{\log_{10}(2)}<br/>\]</p>
<p style="padding-left: 30px;">Python Code to Calculate \( t \): <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/d9558707c7e1765c1e6885ddc6919e32265c6d23/problem-set2-1_py.txt">problem-set2-1.py</a></p>
<p></p>
<h2>w11_hw</h2>
<p>以下影片說明如何利用近端可攜系統維護個人作業網站:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/hAe4qMGC1hE?si=h8t7hbJitHkgVQ-M" title="YouTube video player" width="560"></iframe></p>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span style="background-color: #ffff00;">簡報</span>個人的解題過程與心得.</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/1a_w11_note.txt">1a_w11_note.txt</a></p>
<hr/>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/a5f43d9c5453aaffcf56ae4621e7555888478d8d/1a_weekly_brython.py&amp;page_title=w11_hw">1a w11_hw</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/2dbc73e836424561e34cf05b7a91eaa0c6e7076c/1b_weekly_brython.py&amp;page_title=w11_hw">1b w11_hw</a></p>
<h2>w12_hw</h2>
<p>1. 請各組組員分別利用 <span style="background-color: #ccffcc;">Brython 以及 Jupyter lab</span> 環境, 執行<a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a> notebook 目錄中的 <span style="background-color: #ccffcc;">01_string_input_print.ipynb 至 10_for_search.ipynb</span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 <span style="background-color: #ccffcc;">Gist</span> 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</p>
<hr/>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/a5f43d9c5453aaffcf56ae4621e7555888478d8d/1a_weekly_brython.py&amp;page_title=w12_hw">1a w12_hw</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/2dbc73e836424561e34cf05b7a91eaa0c6e7076c/1b_weekly_brython.py&amp;page_title=w12_hw">1b w12_hw</a></p>
<h2>w13</h2>
<p>w13 作業:</p>
<p>請在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. 操作過程請拍攝影片, 並在頁面中列出作業心得.</p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 繪製兩個矩形
ctx.strokeStyle = 'red'  # 設定矩形顏色為紅色
ctx.beginPath() 
ctx.rect(10, 10, 200, 200)
ctx.rect(110, 110, 200, 200)
ctx.stroke()

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath() 
ctx.moveTo(10, 10)
ctx.lineTo(210, 210)
ctx.stroke()
</script>
</p>
<h3>w13_ai</h3>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 1. 繪製兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'  # 設定矩形的邊框顏色為紅色
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 第一個正方形的左上角在(100, 100)，邊長200
ctx.rect(200, 200, 200, 200)  # 第二個正方形的左上角在(200, 200)，邊長200
ctx.stroke()

# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()

# 3. 繪製兩個外切圓 (黑色)
ctx.strokeStyle = 'black'  # 設定圓的顏色為黑色

# 第一個矩形的外切圓
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)  # 圓心在(200, 200)，半徑為141.4（sqrt(2) * 邊長的一半）
ctx.stroke()

# 第二個矩形的外切圓
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)  # 圓心在(300, 300)，半徑為141.4
ctx.stroke()
</script>
</p>
<p>我們希望透過<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/7a086162a04783664bf64d9abd49da059634a0b4/multiple_circle_interaction_fill.py">這個程式</a>的架構來進行解題過程. 其中包括:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建一個 canvas 元素，並設置它的寬度和高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 獲取指定 id 的 DOM 元素，將 canvas 元素加到網頁中
    brython_div = doc[id]
    brython_div &lt;= canvas  # 將 canvas 加入網頁的 div 中
    # 獲取 canvas 的 2D 上下文，用於繪圖操作
    ctx = canvas.getContext("2d")
    return canvas, ctx  # 返回畫布和上下文
</pre>
<p>以及:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義隨機顏色生成函式，並確保顏色與已生成顏色不相近
def random_color_generator(existing_colors=None, min_distance=100):
    if existing_colors is None:
        existing_colors = []  # 如果沒有已使用顏色，初始化為空列表
    
    attempts = 0
    # 嘗試生成顏色，直到與現有顏色的距離足夠大
    while attempts &lt; 100:
        r = random.randint(0, 255)  # 隨機生成紅色通道值（0-255）
        g = random.randint(0, 255)  # 隨機生成綠色通道值（0-255）
        b = random.randint(0, 255)  # 隨機生成藍色通道值（0-255）
        new_color = (r, g, b)  # 計算出新的顏色

        # 檢查新顏色與所有已使用顏色的距離是否足夠大
        if all(color_distance(new_color, existing_color) &gt; min_distance for existing_color in existing_colors):
            existing_colors.append(new_color)  # 如果顏色距離足夠大，則將顏色添加到已使用顏色列表
            return f"rgb({r}, {g}, {b})"  # 返回該顏色的 RGB 字串

        attempts += 1  # 增加嘗試次數，避免無窮迴圈

    # 如果經過多次嘗試還沒找到合適的顏色，直接返回一個隨機顏色
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"  # 返回新的 RGB 顏色

# 計算兩個顏色之間的歐式距離，用來確保顏色不過於相近
def color_distance(color1, color2):
    r1, g1, b1 = color1  # 解析顏色1的 RGB 值
    r2, g2, b2 = color2  # 解析顏色2的 RGB 值
    # 計算兩個顏色之間的歐式距離，公式為 (R2-R1)^2 + (G2-G1)^2 + (B2-B1)^2 的平方根
    return math.sqrt((r1 - r2) ** 2 + (g1 - g2) ** 2 + (b1 - b2) ** 2)
</pre>
<p>以及:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    # 根據圓的方程式 (px - cx)^2 + (py - cy)^2 &lt;= r^2 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2</pre>
<p>以及:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def point_in_square(x, y, sx, sy, l, w):
    return sx &lt;= x &lt;= l and sy &lt;= y &lt;= w</pre>
<p>以及:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 使用者設定的圓數量與畫布大小，並進行掃描線填充
def draw_circles(num_circles, canvas_width, canvas_height):
    # 初始化畫布，並獲取 2D 畫布上下文
    canvas, ctx = initialize_canvas(canvas_width, canvas_height)
    # 清空畫布，防止舊的圖像殘留
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 隨機生成圓的圓心和半徑
    circles = generate_random_circles(num_circles, canvas_width, canvas_height)
    
    # 用來存儲每個圓的顏色
    color_dict = {}
    # 用來存儲交集區域的顏色
    intersection_colors = {}
    # 用來存儲所有已經生成的顏色
    existing_colors = []  
    
    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas_height):  # 遍歷畫布的每一行（y 座標）
        for px in range(0, canvas_width):  # 遍歷畫布的每一列（x 座標）
            in_circle = []  # 初始化該點所屬圓的索引列表
            # 檢查該點是否位於每個圓內
            for idx, (cx, cy, r) in enumerate(circles):
                if is_point_in_circle(px, py, cx, cy, r):  # 如果點在圓內
                    in_circle.append(idx)  # 記錄該點所在圓的索引
            
            # 根據該點所在圓的數量來決定區域顏色
            if len(in_circle) &gt; 1:
                # 如果該點位於多個圓的交集區域
                in_circle_sorted = tuple(sorted(in_circle))  # 用排序的方式避免順序問題
                # 檢查這個交集區域是否已經有顏色
                if in_circle_sorted not in intersection_colors:
                    intersection_colors[in_circle_sorted] = random_color_generator(existing_colors)  # 隨機選擇顏色
                current_color = intersection_colors[in_circle_sorted]  # 獲取交集區域的顏色
            elif len(in_circle) == 1:
                # 如果該點只位於一個圓內
                if f"circle{in_circle[0]}" not in color_dict:
                    color_dict[f"circle{in_circle[0]}"] = random_color_generator(existing_colors)  # 隨機選擇顏色
                current_color = color_dict[f"circle{in_circle[0]}"]  # 獲取該圓的顏色
            else:
                # 如果該點不在任何圓內，則是背景
                current_color = "white"
            
            # 設置畫布的填充顏色
            ctx.fillStyle = current_color
            # 填充該像素，這裡是填充一個 1x1 的矩形，也就是單一像素
            ctx.fillRect(px, py, 1, 1)</pre>
<p></p><h3>w13_hw</h3>
<p>解題思考: 透過點座標的掃瞄, 先採用尺寸較大格點 (如每 10 pixel 掃描一點), 即可判定點群位於那一個特定區域並<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/3148911ad594ac9e5a370cdd06227e972176779c/inside_circle1_brython.py">進行著色</a>. 當掃描細至單一 pixel 時, 就可以完成<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/fae5dd0145a7d14926dc7c9807ba2535d4b993c0/inside_circle1_1pixel_brython.py">區域著色</a>.</p>
<p>另外, 透過 if 判定各點所在區域的條件組合, 可以就是否:</p>
<p>位於第一個圓內部</p>
<p>位於第二個圓內部</p>
<p>位於第一個正方形內部</p>
<p>位於第二個正方形內部</p>
<p>位於第一個正方形上方、下方、左方、右方</p>
<p>位於第二個正方形上方、下方、左方、右方</p>
<p>位於對角線上方範圍</p>
<p>位於對角線下方範圍</p>
<p>等條件<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/c885949528f12bfa567ebbd2474d13ef4b5c1e46/if_append_brython.py">區分各區域的不同屬性</a>, 並設法利用這些區域屬性進行<a href="https://stackoverflow.com/questions/50528954/give-each-shape-on-html5-canvas-a-random-colour">顏色運算</a>.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/676c6f27ab33fd18873284c51b4c2c008d312c01/almost_right_brython.py">接近正確</a>以及<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/cb369d190d0e69a48e4d44dea5fcab660f4c0f18/almost_right2_brython.py">更細化</a>的著色範例.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/25a616bb5e60e5ca9003d954bb10772d0ab86ae8/rect_fill_color_1_brython.py">rect_fill_1</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/25a616bb5e60e5ca9003d954bb10772d0ab86ae8/rect_fill_color_2_brython.py">rect_fill_2</a></p>
<p></p>
<p></p><h3>w14_ex</h3>
<p>請根據兩個圓繪圖所圍成的<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/a9d887546e024d52d16c228a6657146580342746/two_cicle_section_fill_ex.py">參考範例</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/7a086162a04783664bf64d9abd49da059634a0b4/multiple_circle_interaction_fill.py">多個圓相交區域著色範例</a></p>
<p>以下為參考範例的詳細說明, 請根據此一程式架構, 修改為三個圓的區域塗色任務.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
    
    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")
    
    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² &lt;= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2):
    """
    根據傳入的兩個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
    
    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}

    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色
        current_color = None  
        
        # 遍歷當前行中的每個像素點 (px, py)
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            
            if in_circle1 and in_circle2:
                # 如果點同時在兩個圓內，則是交集區域
                if "intersection" not in color_dict:
                    # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色
                    color_dict["intersection"] = random_color_generator()
                # 設置當前掃描線的顏色為交集區域的顏色
                current_color = color_dict["intersection"]
            elif in_circle1:
                # 如果點只在圓1內，則是圓1的區域
                if "circle1" not in color_dict:
                    # 如果還沒有為圓1分配顏色，則分配一個隨機顏色
                    color_dict["circle1"] = random_color_generator()
                # 設置當前掃描線的顏色為圓1區域的顏色
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內，則是圓2的區域
                if "circle2" not in color_dict:
                    # 如果還沒有為圓2分配顏色，則分配一個隨機顏色
                    color_dict["circle2"] = random_color_generator()
                # 設置當前掃描線的顏色為圓2區域的顏色
                current_color = color_dict["circle2"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色

            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100

# 呼叫畫圓函式，並繪製兩個圓
draw_circles(x1, y1, r1, x2, y2, r2)
</pre>
<p></p><h2>random</h2>
<p><a href="https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/07cd9b3bb02a8822a199a0bc4164b7db83b90a58/big_lotto.py">大樂透電腦選號</a> (list() 與 random.sample() 應用)</p><h1>CAD</h1>
<h4>Solvespace</h4>
<p style="padding-left: 30px;"><a href="https://solvespace.com/">https://solvespace.com/</a> </p>
<h4>SolidWorks</h4>
<p style="padding-left: 30px;">下載安裝 SolidWorks 2023 教育版:</p>
<p style="padding-left: 60px;">請參考電腦輔助設計實習課程中的 <a href="https://mde.tw/cad2024/content/SolidWorks.html">SolidWorks 頁面</a>說明.</p>
<p style="padding-left: 30px;">利用 <a href="/downloads/block_sw_python.txt">block_sw_python.txt</a> Python 程式, 透過重複迴圈修改 <a href="/downloads/block.SLDPRT">block.SLDPRT</a> 零件的參數尺寸後, 建立帶有各零件的下載連結、零件圖、參數尺寸與零件體積等資料的超文件網頁.</p>
<h4>NX</h4>
<p style="padding-left: 30px;"><a href="https://plm.sw.siemens.com/en-US/nx/">https://plm.sw.siemens.com/en-US/nx/</a> </p>
<p style="padding-left: 30px;">NXOpen in Python</p>
<p style="padding-left: 60px;"><a href="/downloads/block.prt">block.prt</a></p>
<p style="padding-left: 60px;"><a href="/downloads/block_nx_python.txt">block_nx_python.txt</a></p>
<p style="padding-left: 30px;"><a href="/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h4>Inventor</h4>
<p style="padding-left: 30px;"><a href="/downloads/part_inventor_python.txt">part_inventor_python.txt</a></p>
<h4>CoppeliaSim</h4>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="/downloads/cad2024_foosball_with_ball_python_script.7z">cad2024_foosball_with_ball_python_script.7z</a></p>
<h4></h4><h2>CoppeliaSim</h2>
<p>下載相容於 IPv6 的 CoppeliaSim 4.7.0 rev4: <a href="http://229.cycu.org/CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z">CoppeliaSim_Edu_4.7.0_rev4_for_2024Fall.7z</a>, 已經內建於 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p><a href="https://manual.coppeliarobotics.com/en/versionInfo.htm">https://manual.coppeliarobotics.com/en/versionInfo.htm</a></p>
<p>user settings file is C:\Users\%USERNAME%\AppData\Roaming/CoppeliaSim/usrset.txt</p>
<p>CoppeliaSim 4.5.1 與 4.7.1 使用 ZMQ RemoteAPI Python 程式的差異:</p>
<ol>
<li>zmqRemoteApi 模組名稱改為 coppeliasim_zmqremoteapi_client</li>
<li>sim 物件中的 sim.setJointForce() 方法已經失效, 必須改用 sim.setJointTargetForce()</li>
</ol>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容
# pip install pyzmq cbor keyboard
# for 4.5.1
#from zmqRemoteApi_IPv6 import RemoteAPIClient
# for 4.7.1
from coppeliasim_zmqremoteapi_client import RemoteAPIClient
import time
import math
import keyboard

# 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線
client = RemoteAPIClient('localhost', 23000)
# 以 getObject 方法取得場景物件
sim = client.getObject('sim')
box = sim.getObject('/box')

# 啟動模擬
sim.startSimulation()
# 建立尺寸數列, 分別定義 x, y, z 方向尺寸
x = 0.2
y = 0.2
z = 0.1
size = [x, y, z]

# 利用 size 數列, 建立圓柱物件, 2 代表 cylinder
# 8 表示 respondable, 1 為 質量
digit1_handle = sim.createPureShape(2, 8, size, 1, None)
# 將圓柱物件命名為 digit1, 若用於機械計分可做為個位數轉盤
# 之後可再導入帶有數字組立的外型零件
sim.setObjectAlias(digit1_handle, 'digit1')
# 轉角單位為徑度
sim.setObjectOrientation(digit1_handle, -1, [0, math.pi/2, 0])
# 起始物件中心位於 [0, 0, 0], 為了位於地板, 往 z 提升一個半徑高度
sim.setObjectPosition(digit1_handle, -1, [0, 0, x/2])

# 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 velocity
joint1_handle = sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic, 0, None)
sim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_velocity)
sim.setObjectAlias(joint1_handle, 'joint1')

# 取得 cylinder 的位置座標
digit1_pos = sim.getObjectPosition(digit1_handle, -1)
joint1_pos = [digit1_pos[0], digit1_pos[1], digit1_pos[2]]

# 將 joint1 至於 cylinder 中心
sim.setObjectPosition(joint1_handle, -1, joint1_pos)
# 取得 digit1_handle 的方位
digit1_ori = sim.getObjectOrientation(digit1_handle, -1)
# 將 joint1_handle 方位與 digit1 對齊
sim.setObjectOrientation(joint1_handle, -1, digit1_ori)

# 將 joint1 置於 box 上
sim.setObjectParent(joint1_handle, box, True)
# 將 cylinder 置於 joint1 上
sim.setObjectParent(digit1_handle, joint1_handle, True)

# 鎖定 joint1
# for 4.5.1
#sim.setJointForce(joint1_handle, float('inf'))
# for 4.7.1
sim.setJointTargetForce(joint1_handle, float('inf'))

print("基本場景建立完成!")

# 設定主迴圈
while True:
    # 設定 joint1 目標速度
    sim.setJointTargetVelocity(joint1_handle, 10)
    # 讓 coppeliasim 有時間按照設定讓 joint1 旋轉
    time.sleep(0.01) 

    if keyboard.is_pressed('q'):
        # 可以按下 q 鍵跳出重複執行迴圈
        break

# 終止模擬
sim.stopSimulation()

</pre>
<p></p>
<h2>Webots</h2>
<p><a href="https://cyberbotics.com/doc/guide/controller-programming?tab-language=python">https://cyberbotics.com/doc/guide/controller-programming?tab-language=python</a></p>
<p>Stable version: <a href="http://229.cycu.org/Webots_2023b.7z">Webots_2023b.7z</a></p>
<p><span style="background-color: #ffff00;">1.</span> 與 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> 結合使用, Webots - Tools - Preferences - Python Command 設定為 Y:\Python310\python.exe</p>
<p><span style="background-color: #ffff00;">2.</span> start_ipv6.bat 必須設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM for Webots
set PYTHON_PATH=%Disk%:\Python310

REM for Webots
set  path_webots=%Disk%:\Webots_2023b\msys64\mingw64\bin

REM 在 path 納入 %path_webots%
path=~~;%path_webots%;%path%;</pre>
<p><span style="background-color: #ffff00;">3.</span> pip install opencv-python</p>
<p>配置完成後, 測試 Python 是否設定正確: <a href="/downloads/Webots_examples.zip">Webots_examples.zip</a> (<a href="https://courses.ideate.cmu.edu/16-375/f2022/ref/text/simulations/index.html">source</a>)</p>
<p><a href="/downloads/vrml97specification.pdf">vrml97specification.pdf</a> (<a href="http://www.graphics.stanford.edu/courses/cs248-98-fall/Assignments/Assignment3/VRML2_Specification/">VRML 2.0</a>, <a href="https://zh.wikipedia.org/zh-tw/VRML">VRML</a>)</p>
<h1>Python</h1>
<p><a href="/downloads/gen_portable_python_and_get_pip.7z">gen_portable_python_and_get_pip.7z</a></p>
<p>Python 執行環境</p>
<p style="padding-left: 30px;">Brython (全球資訊網上的 Python)</p>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/kmolab_ex.7z">kmolab_ex.7z</a> (314MB)</p>
<p>變數 (Variables) 命名規則 - 以底線或英文字母大小寫開頭, 隨後可以加上數字、英文字母或底線, 但不可以使用保留關鍵字 (<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9d7d4227cc13cdad06544e3960c90a1adfb5c388/python_keywords.py">Keywords</a>) 作為變數名稱. (<span style="background-color: #ccffcc;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/73bdeb87cd569ce0b3dc14534d46ca2e1cfb57ef/variables_ex1_python.txt" style="background-color: #ccffcc;">變數命名範例</a></span>)</p>
<p>資料型別 (<a href="https://docs.python.org/zh-tw/3/library/stdtypes.html">Types</a>) - 包含整數 (Integers)、浮點數 (Floats)、字串 (Strings) 與布林 (Booleans)</p>
<p>型別轉換 - int()、str()、float() (<span style="background-color: #ccffcc;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/3eb94e886fff7d4dfe80be04f9b06c4fa15784d4/data_type_and_conversion_ex1_python.txt" style="background-color: #ccffcc;">資料型別與轉換範例</a></span>)</p>
<p>變數賦值 (Assignment) (<span style="background-color: #ccffcc;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/397d8b653af41151e59255d410211124768c7dbd/var_assignment_ex1_python.txt" style="background-color: #ccffcc;">變數賦值範例</a></span>)</p>
<p>算數運算符 (Arithmetic Operators) (<span style="background-color: #ccffcc;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/4099f6463ac21e50acb63583a5435392b66a3d6e/arithmatic_ex1_python.txt" style="background-color: #ccffcc;">算數運算範例</a></span>)</p>
<p>比較運算符 (Comparison Operators) (<span style="background-color: #ccffcc;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/0f11edc374a5a35f6c8269835ef33d04ad6087be/comparison_ex1_python.txt" style="background-color: #ccffcc;">比較運算範例</a></span>)</p>
<p>邏輯運算符 (Logical Operators) (<span style="background-color: #ccffcc;"><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/722d181972f94ffc238af912cb97d09d/raw/0616ba6536a2cea8f7dda9d7447d452a1e52d247/logical_ex1_python.txt" style="background-color: #ccffcc;">邏輯運算範例</a></span>)</p>
<p>條件語句 (Conditional Statements) (if, elif, else)</p>
<p>迴圈 (Loops) (for, while)</p>
<p>中斷 (break), 繼續 (continue) and 跳過 (pass)</p>
<p>列表 (Lists)</p>
<p>元組 (Tuples)</p>
<p>集合 (Sets)</p>
<p>字典 (Dictionaries)</p>
<p>定義與呼叫函式 (Defining and Calling Functions)</p>
<p>參數與返回值 (Arguments and Return Values)</p>
<p>區域與全域變數 (Local and Global Variables)</p>
<p>導入模組 (Importing <a href="https://docs.python.org/zh-tw/3/tutorial/modules.html">Modules</a>)</p>
<p>標準程式庫 (<a href="https://docs.python.org/zh-tw/3/library/index.html">Standard Library</a>)</p>
<p>演算法 (Algorithms)</p>
<p>在 Python 程式中，常見的演算法包括：<br/><br/>    排序演算法：<br/>        冒泡排序（Bubble Sort）、選擇排序（Selection Sort）、插入排序（Insertion Sort）、快速排序（Quick Sort）和合併排序（Merge Sort）。這些算法通常用於對數據進行排序。<br/><br/>    搜尋演算法：<br/>        線性搜尋（Linear Search）和二分搜尋（Binary Search）是常見的搜尋算法，用於查找數據。<br/><br/>    圖演算法：<br/>        深度優先搜尋（DFS）、廣度優先搜尋（BFS）用於圖的內容逐一訪問。<br/><br/>    動態規劃：<br/>        用於解決具有重疊子問題的問題，如費波那契數列、背包問題等。<br/><br/>這些演算法能幫助提高程式的效率和解決各類問題。</p>
<p><a href="https://github.com/TheAlgorithms/Python">https://github.com/TheAlgorithms/Python</a> </p>
<p><a href="/downloads/nxopen_base_and_center_pole_python.txt">nxopen_base_and_center_pole_python.txt</a></p>
<h4>qrcode</h4>
<p><a href="https://en.wikipedia.org/wiki/QR_code">https://en.wikipedia.org/wiki/QR_code</a></p>
<p><a href="https://www.funcode-tech.com/QR_app.html">https://www.funcode-tech.com/QR_app.html</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pip install qrcode matplotlib
import qrcode
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
#img=qrcode.make('20240101;5745632912;Steel;---;---')
img=qrcode.make('虎尾科大機械設計工程系')
img.save('qrcode_ex1.png')
img = mpimg.imread('qrcode_ex1.png')
plt.imshow(img)
plt.show()</pre>
<h4>pdf</h4>
<p>pip install pypdf2</p>
<p>split pdf file:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_split.py
import os
from PyPDF2 import PdfWriter, PdfReader

pdfReader = PdfReader(open("Learn_Autodesk_Inventor_2018_Basics.pdf", "rb"))
information = [("inventor",18,45)]
 
for page in range(len(information)):
    pdf_writer = PdfWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.add_page(pdfReader.pages[start-1])
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
print("已經完成 pdf 切割與存檔")</pre>
<p>combine pdf file:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
from PyPDF2 import PdfWriter, PdfReader

pdf_write_object = PdfWriter()

pdfFileNames = ["inventor1.pdf", "inventor2.pdf"]
newFileName = "inventor"
filenameString = ""

for filename in pdfFileNames:
    pdf_read_object = PdfReader(open(filename, "rb"))
    filenameString += filename + ", "
    for page in range(len(pdf_read_object.pages)):
        pdf_write_object.add_page(pdf_read_object.pages[page])
 
final_file_object = open(newFileName + ".pdf", 'wb')
pdf_write_object.write(final_file_object)
final_file_object.close()

print("已經將 " + filenameString+ " 合併為: "+ newFileName + ".pdf")
</pre>
<h4>Pelican Blog md generator</h4>
<p><a href="https://github.com/mdecycu/pelican_md_generator">https://github.com/mdecycu/pelican_md_generator</a></p>
<h4>NXOpen Python</h4>
<p>機械設計工程師若能夠看得懂 <a href="/downloads/nxopen_base_and_center_pole_python.txt">nxopen_base_and_center_pole_python.txt</a>, 是否能夠將程式碼改寫為 Function 或 Class 架構, 以方便用程式方法建立機電系統設計中的參數式零組件?</p>
<h4>ZMQ remote API Python for CoppeliaSim</h4>
<p>可遠端透過 Python 程式控制機電模擬系統的 <a href="/downloads/cd2023_pj3ag4_zmq_football4.7z">cd2023_pj3ag4_zmq_football4.7z</a>, 則牽涉 ZMQ、IPv4、IPv6 與 <a href="https://docs.python.org/zh-tw/3/library/asyncio.html">asyncio</a> 模組.</p>
<h4>Python for Webots</h4>
<p>Python 程式也能用來控制 Webots 機電模擬系統: <a href="https://cyberbotics.com/doc/guide/using-python">https://cyberbotics.com/doc/guide/using-python</a></p>
<h4>Python 與 CAD 有關的其他應用</h4>
<p><a href="https://pypi.org/project/python-solvespace/">https://pypi.org/project/python-solvespace/</a></p>
<p><a href="https://github.com/jimy-byerley/pymadcad">https://github.com/jimy-byerley/pymadcad</a></p>
<h1>References</h1>
<p>已知:</p>
<ol>
<li>修課學員經由 @nfu.edu.tw 網域, 可利用"學號@nfu.edu.tw"經由 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> 登入 MS 365.</li>
<li>登入後, 使用者可以利用"<a href="https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">應用程式註冊</a>"建立應用程式</li>
<li>所註冊的延伸應用程式則可以利用 Microsoft Online 主機所提供的 OAuth2 API 程式庫, 取得登入者的 profile</li>
<li>經由上列步驟取得登入者的 profile 後, 延伸應用程式可設法讀取課程學員的作業倉儲與網站連結</li>
<li>當每一階段的學員作業網頁完成後, 若再經由亂數方法, 隨機分配給每一位學員 10 個除自己以外的學員作業網站進行評分, 即可根據既定的評分基準完成自評</li>
<li>隨機分配的學員作業網址可利用 email 寄出, 而評分回報則可利用 MS 365 的 Forms 表單取回</li>
</ol>
<p>以下為上列流程的 step 1 測試程式 (<a href="/downloads/teams_oauth2_flask_py.txt">teams_oauth2_flask_py.txt</a>):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, redirect, request, session, url_for
import requests
import json

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # 用於 Flask session 的秘密金鑰

# 替換成你的 Azure AD 應用程式資訊
'''
CLIENT_ID 為"應用程式 (用戶端) 識別碼"
CLIENT_SECRET 則為"憑證及秘密"中"用戶端密碼"的"值"
'''
CLIENT_ID = 'id'
CLIENT_SECRET = 'secret'
TENANT_ID = 'id'
AUTHORITY = f'https://login.microsoftonline.com/{TENANT_ID}'
REDIRECT_URI = 'http://localhost:8000/callback'
SCOPE = 'User.Read'

# 用於登錄和取得授權碼
@app.route('/')
def index():
    auth_url = (f'{AUTHORITY}/oauth2/v2.0/authorize'
                f'?client_id={CLIENT_ID}'
                f'&amp;response_type=code'
                f'&amp;redirect_uri={REDIRECT_URI}'
                f'&amp;response_mode=query'
                f'&amp;scope={SCOPE}')
    return redirect(auth_url)

# 處理回調和交換授權碼
@app.route('/callback')
def callback():
    code = request.args.get('code')
    token_url = f'{AUTHORITY}/oauth2/v2.0/token'
    token_data = {
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': REDIRECT_URI,
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': SCOPE
    }
    token_r = requests.post(token_url, data=token_data)
    token_r.raise_for_status()
    tokens = token_r.json()
    session['access_token'] = tokens['access_token']
    return redirect(url_for('profile'))

# 使用訪問令牌呼叫 Microsoft Graph API 來獲取用戶資料
@app.route('/profile')
def profile():
    access_token = session.get('access_token')
    if not access_token:
        return redirect(url_for('index'))

    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    graph_url = 'https://graph.microsoft.com/v1.0/me'
    graph_r = requests.get(graph_url, headers=headers)
    graph_r.raise_for_status()
    user_info = graph_r.json()
    user_email = str(user_info["mail"])
    user_id = user_email.split("@")[0]
    session["user_id"] = user_id
    # 登出 MS Online 並重定向回首頁
    # 返回 HTML 及 JavaScript 以進行自動登出
    return (f'Hello, {user_id} &lt;br&gt;'
            f'&lt;script type="text/javascript"&gt;'
            f'  window.location = "https://login.microsoftonline.com/common/oauth2/v2.0/logout";'
            f'&lt;/script&gt;')

@app.route('/userid')
def userid():
    return session["user_id"]
    

# 登出功能
@app.route('/logout')
def logout():
    # 清除 session 中的訪問令牌
    session.pop('access_token', None)
    # 重定向到 MS Online 登出 URL
    return redirect('https://login.microsoftonline.com/common/oauth2/v2.0/logout')

if __name__ == '__main__':
    app.run(debug=True, port=8000)
</pre>
<p>以下則為寄信範例:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import json

# 替換為你的應用程式資訊
CLIENT_ID = 'your_client_id'
CLIENT_SECRET = 'your_client_secret'
TENANT_ID = 'your_tenant_id'
AUTHORITY = f'https://login.microsoftonline.com/{TENANT_ID}'
TOKEN_URL = f'{AUTHORITY}/oauth2/v2.0/token'
SCOPE = 'https://graph.microsoft.com/.default'

# 獲取 OAuth2 訪問令牌
def get_access_token():
    token_data = {
        'grant_type': 'client_credentials',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': SCOPE
    }
    token_r = requests.post(TOKEN_URL, data=token_data)
    token_r.raise_for_status()
    tokens = token_r.json()
    return tokens['access_token']

# 發送電子郵件
def send_email(access_token, to_address, subject, body):
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    email_data = {
        "message": {
            "subject": subject,
            "body": {
                "contentType": "Text",
                "content": body
            },
            "toRecipients": [
                {
                    "emailAddress": {
                        "address": to_address
                    }
                }
            ]
        },
        "saveToSentItems": "true"
    }
    email_url = 'https://graph.microsoft.com/v1.0/me/sendMail'
    response = requests.post(email_url, headers=headers, json=email_data)
    response.raise_for_status()
    print("Email sent successfully!")

if __name__ == "__main__":
    token = get_access_token()
    send_email(token, 'recipient@example.com', 'Test Subject', 'This is the email body.')
</pre>
<hr/>
<p>以下利用 ChatGPT 4omini 進行對話:</p>
<p>問:</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">使用 python + flask 開發一個簡單的資料庫程式, 並使用 SQLite, 目前表單有使用者學號以及其 github 帳號, 還有一個備註欄位, 只需要 add, query, update 與 delete 功能, 該如何進行?</p>
<p data-pm-slice="0 0 []">答:</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">1. 安裝 Flask 和 SQLite<br/><br/>首先，確保你已經安裝了 Flask 和 SQLite。如果你還沒有安裝，請使用以下命令：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install Flask
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">SQLite 通常已經隨 Python 安裝，不需要額外安裝。如果你需要 SQLite 的 Python 模組，可以使用以下命令：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pip install sqlite3
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">2. 建立 Flask 應用程式</p>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">應用程式結構</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">flask_app/
│
├── app.py
├── schema.sql
└── templates/
    ├── index.html
    ├── add.html
    ├── update.html
    └── query.html
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">schema.sql — 定義 SQLite 資料表<br/><br/>在 schema.sql 文件中，定義 SQLite 資料表結構：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id TEXT NOT NULL UNIQUE,
    github_account TEXT NOT NULL,
    notes TEXT
);
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">app.py — Flask 應用程式<br/><br/>在 app.py 中，設置 Flask 應用程式並建立 CRUD 功能：</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request, redirect, url_for, render_template
import sqlite3

app = Flask(__name__)

DATABASE = 'database.db'

def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with app.app_context():
        db = get_db()
        with open('schema.sql', 'r') as f:
            db.executescript(f.read())
        db.commit()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/add', methods=['GET', 'POST'])
def add_user():
    if request.method == 'POST':
        student_id = request.form['student_id']
        github_account = request.form['github_account']
        notes = request.form.get('notes', '')

        db = get_db()
        db.execute('INSERT INTO users (student_id, github_account, notes) VALUES (?, ?, ?)',
                   (student_id, github_account, notes))
        db.commit()
        return redirect(url_for('index'))

    return render_template('add.html')

@app.route('/update/&lt;int:user_id&gt;', methods=['GET', 'POST'])
def update_user(user_id):
    db = get_db()
    if request.method == 'POST':
        student_id = request.form['student_id']
        github_account = request.form['github_account']
        notes = request.form.get('notes', '')

        db.execute('UPDATE users SET student_id = ?, github_account = ?, notes = ? WHERE id = ?',
                   (student_id, github_account, notes, user_id))
        db.commit()
        return redirect(url_for('index'))

    user = db.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()
    return render_template('update.html', user=user)

@app.route('/delete/&lt;int:user_id&gt;')
def delete_user(user_id):
    db = get_db()
    db.execute('DELETE FROM users WHERE id = ?', (user_id,))
    db.commit()
    return redirect(url_for('index'))

@app.route('/query')
def query_users():
    db = get_db()
    users = db.execute('SELECT * FROM users').fetchall()
    return render_template('query.html', users=users)

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/index.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Index&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Welcome to User Management&lt;/h1&gt;
    &lt;a href="{{ url_for('add_user') }}"&gt;Add User&lt;/a&gt; |
    &lt;a href="{{ url_for('query_users') }}"&gt;Query Users&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/add.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Add User&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Add User&lt;/h1&gt;
    &lt;form action="{{ url_for('add_user') }}" method="post"&gt;
        &lt;label for="student_id"&gt;Student ID:&lt;/label&gt;
        &lt;input type="text" id="student_id" name="student_id" required&gt;&lt;br&gt;
        &lt;label for="github_account"&gt;GitHub Account:&lt;/label&gt;
        &lt;input type="text" id="github_account" name="github_account" required&gt;&lt;br&gt;
        &lt;label for="notes"&gt;Notes:&lt;/label&gt;
        &lt;textarea id="notes" name="notes"&gt;&lt;/textarea&gt;&lt;br&gt;
        &lt;input type="submit" value="Add"&gt;
    &lt;/form&gt;
    &lt;a href="{{ url_for('index') }}"&gt;Back&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/update.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Update User&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Update User&lt;/h1&gt;
    &lt;form action="{{ url_for('update_user', user_id=user['id']) }}" method="post"&gt;
        &lt;label for="student_id"&gt;Student ID:&lt;/label&gt;
        &lt;input type="text" id="student_id" name="student_id" value="{{ user['student_id'] }}" required&gt;&lt;br&gt;
        &lt;label for="github_account"&gt;GitHub Account:&lt;/label&gt;
        &lt;input type="text" id="github_account" name="github_account" value="{{ user['github_account'] }}" required&gt;&lt;br&gt;
        &lt;label for="notes"&gt;Notes:&lt;/label&gt;
        &lt;textarea id="notes" name="notes"&gt;{{ user['notes'] }}&lt;/textarea&gt;&lt;br&gt;
        &lt;input type="submit" value="Update"&gt;
    &lt;/form&gt;
    &lt;a href="{{ url_for('index') }}"&gt;Back&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">templates/query.html</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Query Users&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Users&lt;/h1&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;ID&lt;/th&gt;
            &lt;th&gt;Student ID&lt;/th&gt;
            &lt;th&gt;GitHub Account&lt;/th&gt;
            &lt;th&gt;Notes&lt;/th&gt;
            &lt;th&gt;Actions&lt;/th&gt;
        &lt;/tr&gt;
        {% for user in users %}
        &lt;tr&gt;
            &lt;td&gt;{{ user['id'] }}&lt;/td&gt;
            &lt;td&gt;{{ user['student_id'] }}&lt;/td&gt;
            &lt;td&gt;{{ user['github_account'] }}&lt;/td&gt;
            &lt;td&gt;{{ user['notes'] }}&lt;/td&gt;
            &lt;td&gt;
                &lt;a href="{{ url_for('update_user', user_id=user['id']) }}"&gt;Update&lt;/a&gt; |
                &lt;a href="{{ url_for('delete_user', user_id=user['id']) }}"&gt;Delete&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        {% endfor %}
    &lt;/table&gt;
    &lt;a href="{{ url_for('index') }}"&gt;Back&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">3. 啟動應用程式<br/><br/>確保你的 Flask 應用程式和模板文件已經正確配置，然後啟動應用程式：</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python app.py
</pre>
<p data-pm-slice="0 0 []" style="padding-left: 30px;">接下來, 可以在瀏覽器中訪問 <code>http://127.0.0.1:5000/</code> 來查看和管理你的資料。</p>
<hr/>
<p data-pm-slice="0 0 []">Video:</p>
<p dir="auto" style="padding-left: 30px;"><a href="https://vimeo.com/user24079973" rel="nofollow">https://vimeo.com/user24079973</a></p>
<p dir="auto" style="padding-left: 30px;"><a href="https://www.youtube.com/@-kmolab9376" rel="nofollow">https://www.youtube.com/@-kmolab9376</a></p>
<p dir="auto">References:</p>
<p dir="auto" style="padding-left: 30px;"><a href="https://web.mae.ufl.edu/designlab/DFMA%20Tips/Fundamental_Design_Principles_KCraig.pdf">Fundamental_Design_Principles</a></p>
<p dir="auto" style="padding-left: 30px;"><a href="https://myigetit.com/tech/interview-questions-for-design-engineers/">Q&amp;A</a></p>
<p dir="auto" style="padding-left: 30px;"><a href="https://github.com/jax-ml/jax">https://github.com/jax-ml/jax</a> (<a href="https://ithelp.ithome.com.tw/articles/10290025?sc=rss.iron">About JAX</a>, <a href="https://vocus.cc/article/63f48a09fd89780001f5a728">AI 2.0</a>)</p>
<p dir="auto" style="padding-left: 30px;"><a href="https://link.springer.com/content/pdf/10.1007/978-3-031-55015-7_19.pdf">RL-X: A Deep Reinforcement Learning Library (Not Only) for RoboCup</a> (<a href="https://github.com/nico-bohlinger/RL-X">RL-X</a>)</p>
<p dir="auto" style="padding-left: 30px;"><a href="https://github.com/n2cholas/awesome-jax">https://github.com/n2cholas/awesome-jax</a></p>
<p dir="auto" style="padding-left: 30px;"><a href="https://github.com/deepmodeling/jax-fem">https://github.com/deepmodeling/jax-fem</a></p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button><button id="roc_flag">ROC Flag</button><button id="proc_flag">PROC flag</button><button id="usa_flag">USA Flag</button><button id="gd_in_brython">GD in Brython</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

# 透過 Ace2 以類別建立一個通用的 button, 可以在多個案例中將 gist 程導入編輯區

class button:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
################################## roc flag start
roc_flag_url = "https://gist.githubusercontent.com/mdecycu/b2b7076761eb5573032dff8ba639ef7f/raw/44a2939309f12acf5fe33a8c561143240d951c0d/roc_flag_brython.py"
roc_flag = button(roc_flag_url)
doc["roc_flag"].bind("click", roc_flag.do)
################################## roc_flag end
################################## proc flag start
proc_flag_url = "https://gist.githubusercontent.com/mdecycu/7464c66475548e9cc41469e36c1dddb2/raw/a68cb31411e493b5d8eac4680d8f927cb515c4bc/proc_flag_in_brython.py"
proc_flag = button(proc_flag_url)
doc["proc_flag"].bind("click", proc_flag.do)
################################## proc_flag end
################################## usa flag start
usa_flag_url = "https://gist.githubusercontent.com/mdecycu/7464c66475548e9cc41469e36c1dddb2/raw/a68cb31411e493b5d8eac4680d8f927cb515c4bc/usa_flag_in_brython.py"
usa_flag = button(usa_flag_url)
doc["usa_flag"].bind("click", usa_flag.do)
################################## usa_flag end
################################## gd in brython start
gd_brython_url = "https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/bb965ee8e64af4094371833b67ac0f3bbbb620a5/gd_in_brython.py"
gd_brython = button(gd_brython_url)
doc["gd_in_brython"].bind("click", gd_brython.do)
################################## gd in brython end
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h2>Demo</h2>
<p>在網頁中建立 Brython 程式環境:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;script type="text/python"&gt;
# write your Brython codes here
&lt;/script&gt;</pre>
<p>Brython <a href="https://docs.python.org/3/tutorial/modules.html"> modules </a> or <a href="https://docs.python.org/3/tutorial/modules.html#packages"> packages </a> can put into downloads/py directory</p>
<p>A Python module is like a file containing special Python instructions that can be used by other Python files or programs. On the other hand, a script is a Python file that is meant to be directly run or executed.</p>
<p>Python Modules 範例:</p>
<p>例如: 將 point.py 放入 downloads/py 目錄中:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#point.py
def point():
    return "可以傳回 point"</pre>
<p>一旦導入上列引用 Brython 的頁面, 其中已經宣告 pythonpath 位於 static 與 downloads/py 目錄中, 因此 Brython 在頁面啟動時將導入當時位於這兩個目錄中的 .py 模組, 之後就可以透過 import 導入 point.py 作為模組:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import point
print(point.point())
 
# 執行後的結果將會印出 downloads/py/point.py 中的 point() 函式執行內容, 也就是"可以傳回 point".</pre>
<p>Python Packages 範例:</p>
<p>例如: 將 point2.py 放入 downloads/py/line/ 目錄中, 且在 line 目錄中加入一個空的 __init__.py 檔案.</p>
<p>且 point2.py 的內容與先前 point.py 的內容相同. 一旦上列導入 Brython 且宣告 pythonpath 位於 downloads/py 之後, 之後頁面中的 Brython 程式就可以採 import 的方式導入 line package, 並且使用 package 中的 point2.py modules.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 引用 line package 的範例
from line import point2
print(point2.point())
 
# 執行結果會印出"可以傳回 point"</pre>
<p>透過 <a href="https://betterprogramming.pub/three-js-with-python-syntax-pyweb3d-2152bed1a43d"> PyWeb3d </a> ( <a href="https://github.com/Bruno-Odinukweze/PyWeb3D"> on Github </a> ), 能不能利用 Brython 建立一個 3D 的貪食蛇或俄羅斯方塊?</p>
<p><a href="/downloads/ajax.7z">ajax.7z</a></p>
<!-- 導入 Brython 解譯程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<!-- 設定 id, 讓 Canvas 繪圖資料可以插入 -->
<div id="brython_div1"></div>
<div id="brython_div2"></div>
<!-- 以下為 Brython 程式 -->
<script type="text/python3">
from browser import document  # 從瀏覽器模組導入 document，便於操作網頁的 DOM 元素

# 建立下拉選單
dropdown = document.createElement("div")  # 創建一個新的 div 元素作為下拉選單的容器
dropdown.className = "dropdown"  # 設定 div 的類名為 "dropdown"，用於 CSS 樣式

button = document.createElement("button")  # 創建一個新的按鈕元素
button.textContent = "Select an Option"  # 設定按鈕的文本為 "Select an Option"
button.className = "dropbtn"  # 設定按鈕的類名為 "dropbtn"，用於 CSS 樣式

dropdown_content = document.createElement("div")  # 創建一個新的 div 元素用來放置下拉內容
dropdown_content.className = "dropdown-content"  # 設定下拉內容 div 的類名為 "dropdown-content"

# 創建選項
options = ["Option 1 ", "Option 2 ", "Option 3 "]  # 定義一個包含選項的列表

for option in options:  # 遍歷每一個選項
    link = document.createElement("a")  # 創建一個新的 a 元素用來表示每個選項
    link.href = "#"  # 設定鏈接的 href 屬性為 "#"
    link.textContent = option  # 將鏈接的文本設置為當前選項的名稱

    # 綁定點擊事件，調用 select_option 函數並傳遞當前選項
    link.bind("click", lambda event, selected_option=option: select_option(selected_option))  
    dropdown_content <= link  # 將鏈接添加到下拉內容中

dropdown <= button  # 將按鈕添加到下拉選單容器中
dropdown <= dropdown_content  # 將下拉內容添加到下拉選單容器中
document["brython_div1"] <= dropdown  # 將下拉選單容器添加到 ID 為 "brython_div1" 的元素中

# 處理選項選擇的函數
def select_option(option):  # 定義選項選擇的處理函數
    document["brython_div2"].clear()  # 清空 ID 為 "brython_div2" 的內容
    document["brython_div2"] <= f"You selected: {option}"  # 在 ID 為 "brython_div2" 的元素中顯示所選的選項
</script>
<h2>Demo2</h2>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="output"></div>
<div id="output1"></div>
<p>
<script>
// JavaScript 函數，用於測量字符的寬度
    function get_char_width(char) {
        var container = document.createElement("div");
        container.className = "char-container";
        container.innerText = char;
        document.body.appendChild(container);
        var width = container.offsetWidth;
        document.body.removeChild(container);
        return width;
    }

    // 這個函數將會在 Brython 中被調用
    function getWidthFromJS(char) {
        return get_char_width(char);
    }

    // JavaScript 函數：讀取現有的 CSS 設定（如 line-height）
    function get_line_height_of_element(element_id) {
        var element = document.getElementById(element_id); // 獲取指定的元素
        var style = window.getComputedStyle(element); // 獲取元素的計算後樣式
        return style.lineHeight;  // 返回 line-height 的屬性值
    }

    // 這個函數會被 Brython 調用來獲取行距
    function getLineHeightFromJS() {
        return get_line_height_of_element('output');  // 'text' 是段落元素的 id
    }
</script>
<script type="text/python3">
from browser import document, window

def get_char_width_from_js(char):
    # 呼叫 JavaScript 函數來獲取字符寬度
    return window.getWidthFromJS(char)

def get_line_height_from_js():
    # 呼叫 JavaScript 函數來獲取行距
    return window.getLineHeightFromJS()

# 示例: 輸出英文字母和符號的寬度
output = document["output"]
output.html = "<h4>Character Widths (in pixels):</h4>"

# 測試的字符範圍 (ASCII 符號)
for char in "*abcdefghijklmnopqrstuvwxyz_ ":
    width = get_char_width_from_js(char)
    output <= f"{char}: {width}px" + "\n"

output1 = document["output1"]
output1.html = "<h4>Character Height (in pixels):</h4>"
# 測量並顯示行距
line_height = get_line_height_from_js()
output1 <= f"Line height: {line_height}"
</script>
</p>